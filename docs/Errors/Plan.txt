Plan d'implémentation pour l'automatisation des variables d'environnement dans l'infrastructure Terraform
Objectif
Intégrer la copie des fichiers nécessaires dans le module S3 de Terraform et utiliser des dépendances entre ressources pour garantir que les instances EC2 attendent la création des ressources nécessaires avec les bons paramètres.

Étapes du plan
1. Analyse des scripts existants
Examiner les scripts dans  C:\Users\Hel\Documents\Projects\Studi-YourMedia-ECF\scripts
Identifier les scripts essentiels à conserver et ceux qui peuvent être supprimés
Catégoriser les scripts par type (sh, service, timer, yml, Dockerfile, sql)
2. Modification du module S3 dans Terraform
Ajouter des ressources pour copier les scripts nécessaires vers le bucket S3
Configurer le chiffrement côté serveur pour les fichiers sensibles
Créer un fichier JSON pour stocker les variables d'environnement sensibles
Mettre en place des mécanismes pour nettoyer les fichiers temporaires locaux
3. Configuration des rôles IAM et des politiques
Créer des rôles IAM pour les instances EC2 (monitoring et java-tomcat)
Définir des politiques d'accès S3 limitées aux fichiers nécessaires
Attacher les politiques aux rôles IAM
Créer des profils d'instance pour les instances EC2
4. Modification des scripts d'initialisation
Adapter les scripts d'initialisation pour récupérer les variables depuis S3
Configurer les scripts pour installer les dépendances nécessaires
Mettre en place la journalisation pour faciliter le débogage
Assurer la sécurisation des fichiers contenant des informations sensibles
5. Configuration des instances EC2
Modifier la configuration de l'instance EC2 de monitoring
Configurer l'instance EC2 java-tomcat
Ajouter des dépendances explicites pour garantir l'ordre de création
Configurer le user-data pour télécharger et exécuter les scripts d'initialisation
6. Mise en place des variables Terraform
Définir toutes les variables nécessaires dans variables.tf
Marquer les variables sensibles avec l'attribut sensitive
Configurer des valeurs par défaut appropriées pour les variables non sensibles
Documenter chaque variable avec une description claire
7. Stockage des variables sensibles
Configurer Terraform Cloud pour stocker les variables sensibles
Définir les variables d'environnement nécessaires dans Terraform Cloud
Assurer la transmission sécurisée des variables vers les instances EC2
8. Tests et validation
Tester le déploiement complet de l'infrastructure
Vérifier que les instances EC2 récupèrent correctement les variables
Valider le fonctionnement des applications déployées
S'assurer que les fichiers sensibles sont correctement sécurisés
Détails spécifiques
Scripts à conserver et adapter
Scripts d'initialisation
scripts/ec2-monitoring/init-monitoring.sh (à créer)
 scripts/ec2-monitoring/setup-monitoring.sh (à adapter)
scripts/ec2-java-tomcat/init-java-tomcat.sh (à créer)
 scripts/ec2-java-tomcat/setup-java-tomcat.sh (à adapter)
Fichiers de configuration
Fichiers Docker Compose pour les services
Fichiers de configuration pour Prometheus, Grafana, etc.
Fichiers SQL pour l'initialisation de la base de données
Scripts de service
Scripts systemd pour la gestion des services
Scripts de démarrage automatique
Dépendances à configurer
Ordre de création des ressources
S3 Bucket → Objets S3 → RDS → EC2 Monitoring → EC2 Java-Tomcat
Dépendances explicites
L'instance EC2 de monitoring dépend de RDS et des objets S3
L'instance EC2 java-tomcat dépend de RDS et des objets S3
Variables à gérer
Variables RDS
RDS_USERNAME
RDS_PASSWORD
RDS_ENDPOINT
RDS_NAME
Variables Grafana
GRAFANA_ADMIN_PASSWORD
Variables AWS
AWS_REGION
S3_BUCKET_NAME
Variables d'application
MONITORING_EC2_PUBLIC_IP
JAVA_TOMCAT_EC2_PUBLIC_IP
Considérations de sécurité
Utiliser le chiffrement côté serveur pour tous les fichiers sensibles dans S3
Limiter les permissions IAM au strict minimum nécessaire
Sécuriser les fichiers contenant des variables sensibles sur les instances EC2
Utiliser des variables Terraform marquées comme sensibles pour éviter leur exposition dans les logs
Considérations de performance
Optimiser les scripts pour minimiser le temps de démarrage des instances
Configurer des limites de mémoire appropriées pour les conteneurs Docker
Assurer que les instances t2.micro peuvent exécuter tous les services nécessaires
Ce plan vous permettra de mettre en place une infrastructure automatisée où les variables sensibles sont gérées de manière sécurisée et où les dépendances entre ressources sont clairement définies, évitant ainsi le besoin d'appliquer des cibles Terraform spécifiques.