name: Synchroniser les secrets GitHub vers Terraform Cloud

on:
  workflow_dispatch:
    inputs:
      workspace_id:
        description: 'ID de l''espace de travail Terraform Cloud'
        required: true
        default: 'ws-xxxxxxxx'
      organization:
        description: 'Organisation Terraform Cloud'
        required: true
        default: 'Med3Sin'
      secrets_to_sync:
        description: 'Liste des secrets GitHub à synchroniser (séparés par des virgules)'
        required: true
        default: 'AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION'

jobs:
  sync-secrets:
    name: Synchroniser les secrets vers Terraform Cloud
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configurer l'environnement
        run: |
          echo "::group::Configuration de l'environnement"
          echo "Organisation Terraform Cloud: ${{ github.event.inputs.organization }}"
          echo "ID de l'espace de travail: ${{ github.event.inputs.workspace_id }}"
          echo "Secrets à synchroniser: ${{ github.event.inputs.secrets_to_sync }}"
          echo "::endgroup::"

      - name: Préparer les secrets pour la synchronisation
        id: prepare-secrets
        run: |
          # Créer un fichier temporaire avec des permissions restreintes
          SECRET_FILE=$(mktemp)
          chmod 600 "$SECRET_FILE"
          
          # Convertir la liste des secrets en tableau
          IFS=',' read -ra SECRET_ARRAY <<< "${{ github.event.inputs.secrets_to_sync }}"
          
          # Initialiser un compteur pour les statistiques
          TOTAL_SECRETS=0
          
          echo "::group::Préparation des secrets"
          echo "Préparation des secrets pour la synchronisation..."
          
          # Pour chaque secret dans la liste
          for SECRET_NAME in "${SECRET_ARRAY[@]}"; do
            # Trim des espaces
            SECRET_NAME=$(echo "$SECRET_NAME" | xargs)
            
            if [ -n "$SECRET_NAME" ]; then
              # Vérifier si le secret existe
              SECRET_VALUE="${!SECRET_NAME}"
              
              if [ -n "$SECRET_VALUE" ]; then
                # Masquer la valeur du secret dans les logs
                MASKED_VALUE="$(echo "$SECRET_VALUE" | cut -c1-2)****$(echo "$SECRET_VALUE" | rev | cut -c1-2 | rev)"
                CHAR_COUNT=${#SECRET_VALUE}
                
                echo "Secret '$SECRET_NAME' trouvé (longueur: $CHAR_COUNT caractères, aperçu: $MASKED_VALUE)"
                
                # Ajouter le secret au fichier temporaire au format JSON
                echo "{\"name\":\"$SECRET_NAME\",\"value\":\"$SECRET_VALUE\",\"category\":\"terraform\",\"hcl\":false,\"sensitive\":true}" >> "$SECRET_FILE"
                
                TOTAL_SECRETS=$((TOTAL_SECRETS + 1))
              else
                echo "⚠️ Secret '$SECRET_NAME' non trouvé ou vide - ignoré"
              fi
            fi
          done
          
          echo "Total des secrets préparés: $TOTAL_SECRETS"
          echo "::endgroup::"
          
          # Stocker le chemin du fichier et le nombre de secrets pour les étapes suivantes
          echo "secret_file=$SECRET_FILE" >> $GITHUB_OUTPUT
          echo "total_secrets=$TOTAL_SECRETS" >> $GITHUB_OUTPUT

      - name: Synchroniser les secrets avec Terraform Cloud
        if: steps.prepare-secrets.outputs.total_secrets > 0
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          SECRET_FILE: ${{ steps.prepare-secrets.outputs.secret_file }}
          WORKSPACE_ID: ${{ github.event.inputs.workspace_id }}
          ORGANIZATION: ${{ github.event.inputs.organization }}
        run: |
          echo "::group::Synchronisation avec Terraform Cloud"
          echo "Synchronisation de ${{ steps.prepare-secrets.outputs.total_secrets }} secrets vers Terraform Cloud..."
          
          # Lire le fichier ligne par ligne
          while IFS= read -r SECRET_JSON; do
            # Extraire le nom du secret
            SECRET_NAME=$(echo "$SECRET_JSON" | jq -r '.name')
            
            # Vérifier si la variable existe déjà
            VARIABLE_ID=$(curl -s \
              --header "Authorization: Bearer $TF_API_TOKEN" \
              --header "Content-Type: application/vnd.api+json" \
              "https://app.terraform.io/api/v2/workspaces/$WORKSPACE_ID/vars" | \
              jq -r --arg name "$SECRET_NAME" '.data[] | select(.attributes.key==$name) | .id')
            
            if [ -n "$VARIABLE_ID" ]; then
              # Mettre à jour la variable existante
              echo "Mise à jour du secret '$SECRET_NAME' dans Terraform Cloud..."
              
              RESPONSE=$(curl -s -w "\n%{http_code}" \
                --header "Authorization: Bearer $TF_API_TOKEN" \
                --header "Content-Type: application/vnd.api+json" \
                --request PATCH \
                --data "{\"data\":{\"id\":\"$VARIABLE_ID\",\"type\":\"vars\",\"attributes\":$(echo "$SECRET_JSON" | jq '{key: .name, value: .value, description: "Synchronisé depuis GitHub Actions le '"$(date -u +"%Y-%m-%d %H:%M:%S UTC")"'", category: .category, hcl: .hcl, sensitive: .sensitive}')}}" \
                "https://app.terraform.io/api/v2/workspaces/$WORKSPACE_ID/vars/$VARIABLE_ID")
              
              HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
              RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')
              
              if [[ "$HTTP_CODE" == 2* ]]; then
                echo "✅ Secret '$SECRET_NAME' mis à jour avec succès"
              else
                echo "❌ Échec de la mise à jour du secret '$SECRET_NAME': $HTTP_CODE"
                echo "Réponse: $RESPONSE_BODY"
              fi
            else
              # Créer une nouvelle variable
              echo "Création du secret '$SECRET_NAME' dans Terraform Cloud..."
              
              RESPONSE=$(curl -s -w "\n%{http_code}" \
                --header "Authorization: Bearer $TF_API_TOKEN" \
                --header "Content-Type: application/vnd.api+json" \
                --request POST \
                --data "{\"data\":{\"type\":\"vars\",\"attributes\":$(echo "$SECRET_JSON" | jq '{key: .name, value: .value, description: "Synchronisé depuis GitHub Actions le '"$(date -u +"%Y-%m-%d %H:%M:%S UTC")"'", category: .category, hcl: .hcl, sensitive: .sensitive}')}}" \
                "https://app.terraform.io/api/v2/workspaces/$WORKSPACE_ID/vars")
              
              HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
              RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')
              
              if [[ "$HTTP_CODE" == 2* ]]; then
                echo "✅ Secret '$SECRET_NAME' créé avec succès"
              else
                echo "❌ Échec de la création du secret '$SECRET_NAME': $HTTP_CODE"
                echo "Réponse: $RESPONSE_BODY"
              fi
            fi
          done < "$SECRET_FILE"
          
          echo "::endgroup::"

      - name: Nettoyer
        if: always()
        run: |
          # Supprimer le fichier temporaire contenant les secrets
          if [ -f "${{ steps.prepare-secrets.outputs.secret_file }}" ]; then
            rm -f "${{ steps.prepare-secrets.outputs.secret_file }}"
            echo "Fichier temporaire de secrets supprimé"
          fi

      - name: Résumé
        run: |
          echo "## Résumé de la synchronisation des secrets" >> $GITHUB_STEP_SUMMARY
          echo "- **Organisation Terraform Cloud**: ${{ github.event.inputs.organization }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ID de l'espace de travail**: ${{ github.event.inputs.workspace_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Secrets synchronisés**: ${{ steps.prepare-secrets.outputs.total_secrets }}/${{ github.event.inputs.secrets_to_sync | split: ',' | size }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Note de sécurité**: Ce workflow a transféré des secrets de GitHub vers Terraform Cloud. Les secrets sont masqués dans les logs, mais il est recommandé de supprimer ce workflow après utilisation si vous ne prévoyez pas de l'utiliser régulièrement." >> $GITHUB_STEP_SUMMARY
