name: 3 - Build and Deploy Backend (Java WAR)

# -----------------------------------------------------------------------
# Ce workflow gère la compilation et le déploiement de l'application backend Java.
# Il compile le code Java avec Maven, télécharge le WAR sur S3, puis le déploie
# sur l'instance EC2 exécutant Tomcat via SSH.
# -----------------------------------------------------------------------

on:
  workflow_dispatch:
    inputs:
      ec2_public_ip:
        description: "Adresse IP publique de l'instance EC2 (depuis les outputs Terraform)"
        required: true
        type: string
      s3_bucket_name:
        description: "Nom du bucket S3 (depuis les outputs Terraform)"
        required: true
        type: string

# Variables d'environnement globales
env:
  JAVA_VERSION: '17'         # Version de Java à utiliser
  JAVA_DISTRIBUTION: 'temurin' # Distribution Java (Adoptium Temurin)
  AWS_REGION: eu-west-3      # Région AWS (Paris)
  APP_DIR: ./app-java        # Répertoire de l'application Java
  WAR_NAME: yourmedia-backend.war # Nom du fichier WAR

jobs:
  build-and-deploy:
    name: Build WAR and Deploy to EC2 Tomcat
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Récupère tout l'historique pour les tags

      # Étape 2: Configuration de Java
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      # Étape 3: Mise en cache des dépendances Maven
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Étape 4: Compilation avec Maven
      - name: Build with Maven
        run: |
          echo "::group::Maven Build"
          mvn -B package --file pom.xml # -B pour le mode batch non interactif
          echo "::endgroup::"
        working-directory: ${{ env.APP_DIR }}

      # Étape 5: Configuration des identifiants AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Étape 6: Téléchargement du WAR sur S3
      - name: Upload WAR to S3
        run: |
          echo "::group::Upload to S3"
          aws s3 cp target/${{ env.WAR_NAME }} s3://${{ github.event.inputs.s3_bucket_name }}/builds/backend/${{ env.WAR_NAME }}
          echo "WAR téléversé avec succès sur S3: s3://${{ github.event.inputs.s3_bucket_name }}/builds/backend/${{ env.WAR_NAME }}"
          echo "::endgroup::"
        working-directory: ${{ env.APP_DIR }}

      # Étape 7: Configuration de SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      # Étape 8: Déploiement du WAR sur l'instance EC2
      - name: Deploy WAR from S3 to EC2 Tomcat
        run: |
          echo "::group::Deploy to EC2"
          # Ajout de la clé d'hôte EC2 aux known_hosts pour éviter les prompts
          ssh-keyscan -H ${{ github.event.inputs.ec2_public_ip }} >> ~/.ssh/known_hosts

          # Connexion SSH à l'EC2 et utilisation d'AWS CLI pour copier depuis S3 vers Tomcat webapps
          ssh ubuntu@${{ github.event.inputs.ec2_public_ip }} << EOF
            echo "--- Installation d'AWS CLI (si nécessaire) ---"
            if ! command -v aws &> /dev/null
            then
                sudo apt-get update -y
                sudo apt-get install -y awscli
            fi
            echo "--- Copie du WAR depuis S3 vers Tomcat ---"
            sudo aws s3 cp s3://${{ github.event.inputs.s3_bucket_name }}/builds/backend/${{ env.WAR_NAME }} /opt/tomcat/webapps/${{ env.WAR_NAME }}
            echo "--- Déploiement terminé, Tomcat va automatiquement déployer le WAR ---"
          EOF
          echo "::endgroup::"

      # Étape 9: Résumé du déploiement
      - name: Summary
        run: |
          echo "## Résumé du déploiement Backend" >> $GITHUB_STEP_SUMMARY
          echo "* **Application:** Backend Java (WAR)" >> $GITHUB_STEP_SUMMARY
          echo "* **Instance EC2:** ${{ github.event.inputs.ec2_public_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Bucket S3:** ${{ github.event.inputs.s3_bucket_name }}" >> $GITHUB_STEP_SUMMARY
          echo "* **URL de l'application:** http://${{ github.event.inputs.ec2_public_ip }}:8080/${{ env.WAR_NAME | replace: '.war', '' }}/" >> $GITHUB_STEP_SUMMARY
          echo "* **Statut:** Déployé avec succès ✅" >> $GITHUB_STEP_SUMMARY
