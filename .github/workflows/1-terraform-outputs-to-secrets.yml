name: 1 - Terraform Outputs to GitHub Secrets

# -----------------------------------------------------------------------
# Ce workflow exécute Terraform et stocke les outputs dans GitHub Secrets
# pour qu'ils puissent être utilisés par les autres workflows.
# -----------------------------------------------------------------------

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement de déploiement'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  TF_CLOUD_ORGANIZATION: "Med3Sin"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "Med3Sin"
  AWS_REGION: "eu-west-3"

jobs:
  terraform-outputs:
    name: Export Terraform Outputs to GitHub Secrets
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    permissions:
      # Nécessaire pour mettre à jour les secrets GitHub
      contents: read
      id-token: write

    steps:
      # Étape 1: Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2: Configuration des identifiants AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Étape 3: Configuration de Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Étape 4: Initialisation de Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure

      # Étape 5: Récupération des outputs Terraform
      - name: Terraform Output
        id: terraform-output
        run: |
          # Récupérer tous les outputs Terraform et les stocker dans des variables
          echo "Récupération des outputs Terraform..."

          # EC2 Java Tomcat Public IP
          EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip || echo "")
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
          echo "EC2 Public IP: $EC2_PUBLIC_IP"

          # S3 Bucket Name
          S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name || echo "")
          echo "S3_BUCKET_NAME=$S3_BUCKET_NAME" >> $GITHUB_ENV
          echo "S3 Bucket Name: $S3_BUCKET_NAME"

          # Amplify App URL - Non disponible dans les outputs
          AMPLIFY_APP_URL="Non disponible"
          echo "AMPLIFY_APP_URL=$AMPLIFY_APP_URL" >> $GITHUB_ENV
          echo "Amplify App URL: $AMPLIFY_APP_URL (Non disponible dans les outputs)"

          # RDS Endpoint
          RDS_ENDPOINT=$(terraform output -raw rds_endpoint || echo "")
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV
          echo "RDS Endpoint: $RDS_ENDPOINT"

          # Grafana URL - Construit à partir de l'output grafana_access_note
          GRAFANA_ACCESS_NOTE=$(terraform output -raw grafana_access_note || echo "")
          # Construire l'URL Grafana à partir de l'IP EC2 du monitoring
          if [[ -n "$EC2_PUBLIC_IP" ]]; then
            GRAFANA_URL="http://$EC2_PUBLIC_IP:3000"
          else
            GRAFANA_URL="Non disponible"
          fi
          echo "GRAFANA_URL=$GRAFANA_URL" >> $GITHUB_ENV
          echo "Grafana URL: $GRAFANA_URL (Construit à partir de l'IP EC2)"
        working-directory: ./infrastructure

      # Étape 6: Mise à jour des secrets GitHub avec actions/github-script
      - name: Update GitHub Secrets
        uses: actions/github-script@v7
        env:
          EC2_PUBLIC_IP: ${{ env.EC2_PUBLIC_IP }}
          S3_BUCKET_NAME: ${{ env.S3_BUCKET_NAME }}
          AMPLIFY_APP_URL: ${{ env.AMPLIFY_APP_URL }}
          RDS_ENDPOINT: ${{ env.RDS_ENDPOINT }}
          GRAFANA_URL: ${{ env.GRAFANA_URL }}
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const { EC2_PUBLIC_IP, S3_BUCKET_NAME, AMPLIFY_APP_URL, RDS_ENDPOINT, GRAFANA_URL } = process.env;

            // Fonction pour mettre à jour un secret
            async function updateSecret(name, value) {
              console.log(`Updating secret ${name}...`);
              try {
                // Récupérer la clé publique du repo pour chiffrer le secret
                const { data: publicKeyData } = await github.rest.actions.getRepoPublicKey({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });

                // Chiffrer la valeur du secret
                const sodium = require('tweetsodium');
                const messageBytes = Buffer.from(value);
                const keyBytes = Buffer.from(publicKeyData.key, 'base64');
                const encryptedBytes = sodium.seal(messageBytes, keyBytes);
                const encrypted = Buffer.from(encryptedBytes).toString('base64');

                // Créer ou mettre à jour le secret
                await github.rest.actions.createOrUpdateRepoSecret({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  secret_name: name,
                  encrypted_value: encrypted,
                  key_id: publicKeyData.key_id
                });

                console.log(`Secret ${name} updated successfully.`);
              } catch (error) {
                console.error(`Error updating secret ${name}: ${error.message}`);
                core.setFailed(`Error updating secret ${name}: ${error.message}`);
              }
            }

            // Mettre à jour tous les secrets
            await updateSecret('TF_EC2_PUBLIC_IP', EC2_PUBLIC_IP);
            await updateSecret('TF_S3_BUCKET_NAME', S3_BUCKET_NAME);
            await updateSecret('TF_AMPLIFY_APP_URL', AMPLIFY_APP_URL);
            await updateSecret('TF_RDS_ENDPOINT', RDS_ENDPOINT);
            await updateSecret('TF_GRAFANA_URL', GRAFANA_URL);

      # Étape 7: Résumé
      - name: Summary
        run: |
          echo "## Résumé de l'exportation des outputs Terraform" >> $GITHUB_STEP_SUMMARY
          echo "Les outputs Terraform suivants ont été exportés vers GitHub Secrets :" >> $GITHUB_STEP_SUMMARY
          echo "* **EC2_PUBLIC_IP** : ${{ env.EC2_PUBLIC_IP }}" >> $GITHUB_STEP_SUMMARY
          echo "* **S3_BUCKET_NAME** : ${{ env.S3_BUCKET_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "* **AMPLIFY_APP_URL** : ${{ env.AMPLIFY_APP_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "* **RDS_ENDPOINT** : ${{ env.RDS_ENDPOINT }}" >> $GITHUB_STEP_SUMMARY
          echo "* **GRAFANA_URL** : ${{ env.GRAFANA_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "Ces secrets peuvent maintenant être utilisés dans les autres workflows." >> $GITHUB_STEP_SUMMARY
