name: 0 - Deploy/Destroy Infrastructure (Terraform)

# -----------------------------------------------------------------------
# Ce workflow gère le déploiement et la destruction de l'infrastructure AWS via Terraform.
# Il utilise le secret GH_PAT au lieu de GITHUB_TOKEN car les noms de secrets personnalisés
# ne doivent pas commencer par GITHUB_ (préfixe réservé aux variables d'environnement GitHub).
# La syntaxe ${{ secrets.GH_PAT || '' }} permet d'utiliser une chaîne vide si le secret
# n'est pas défini, évitant ainsi le blocage du workflow.
# -----------------------------------------------------------------------

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action Terraform à exécuter'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan     # Prévisualiser les changements sans les appliquer
          - apply    # Appliquer les changements à l'infrastructure
          - destroy  # Détruire l'infrastructure existante
      ssh_public_key:
        description: 'Clé SSH publique pour les instances EC2 (optionnel)'
        required: false
        type: string



# Variables d'environnement globales
env:
  TF_WORKING_DIR: ./infrastructure  # Répertoire contenant les fichiers Terraform
  AWS_REGION: eu-west-3            # Région AWS (Paris)

jobs:
  terraform:
    name: 'Terraform ${{ github.event.inputs.action }}'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      # Étape 1: Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main  # Utilise explicitement la branche main
          fetch-depth: 0  # Récupère tout l'historique pour les tags

      # Étape 2: Configuration de Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ">=1.0"  # Version compatible avec le code
          terraform_wrapper: false    # Désactive le wrapper pour une meilleure gestion des erreurs

      # Étape 3: Configuration des identifiants AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Étape 4: Configuration des identifiants
      - name: Setup Credentials
        run: |
          # Configuration de Terraform Cloud
          mkdir -p $HOME/.terraform.d
          echo '{"credentials": {"app.terraform.io": {"token": "'${{ secrets.TF_API_TOKEN }}'"}}}' > $HOME/.terraform.d/credentials.tfrc.json
          cat $HOME/.terraform.d/credentials.tfrc.json

          # Configuration explicite des identifiants AWS
          mkdir -p $HOME/.aws
          echo "[default]" > $HOME/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $HOME/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $HOME/.aws/credentials
          echo "region=${{ env.AWS_REGION }}" >> $HOME/.aws/credentials

          # Configuration de la région AWS
          echo "[default]" > $HOME/.aws/config
          echo "region=${{ env.AWS_REGION }}" >> $HOME/.aws/config

          # Sécuriser les fichiers
          chmod 600 $HOME/.aws/credentials
          chmod 600 $HOME/.aws/config

      # Étape 5: Vérification de l'environnement
      - name: Check Environment
        run: |
          echo "GitHub Runner OS: $RUNNER_OS"
          echo "GitHub Runner Temp: $RUNNER_TEMP"
          echo "GitHub Workspace: $GITHUB_WORKSPACE"
          echo "AWS Region: ${{ env.AWS_REGION }}"
          echo "AWS Access Key ID is set: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}"
          echo "AWS Secret Access Key is set: ${{ secrets.AWS_SECRET_ACCESS_KEY != '' }}"
          echo "TF API Token is set: ${{ secrets.TF_API_TOKEN != '' }}"
          # Vérifier la version d'AWS CLI
          aws --version
          # Vérifier si les identifiants AWS sont valides (sans révéler les valeurs)
          aws sts get-caller-identity --query "Account" --output text || echo "AWS credentials not valid"

      # Étape 6: Initialisation de Terraform
      - name: Terraform Init
        id: init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          TF_LOG: DEBUG
        run: terraform init

      # Étape 5: Validation de la configuration Terraform
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # Étape 6: Formatage du code Terraform (vérification uniquement)
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true  # Ne bloque pas le workflow si le formatage n'est pas correct

      # Étape 7: Planification des changements Terraform
      - name: Terraform Plan
        id: plan
        if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          echo "::group::Terraform Plan"
          terraform plan \
            -var="aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var="aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="ec2_key_pair_name=${{ secrets.EC2_KEY_PAIR_NAME }}" \
            -var="ssh_public_key=${{ github.event.inputs.ssh_public_key || '' }}" \
            -var="github_token=${{ secrets.GH_PAT || '' }}" \
            -var="repo_owner=${{ github.repository_owner }}" \
            -var="repo_name=${{ github.repository }}" \
            -no-color \
            -out=tfplan
          echo "::endgroup::"
        continue-on-error: false  # Arrête le workflow si le plan échoue

      # Étape 8: Application des changements Terraform
      - name: Terraform Apply
        id: apply
        if: github.event.inputs.action == 'apply'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          echo "::group::Terraform Apply"
          terraform apply -auto-approve tfplan
          echo "::endgroup::"

          # Affiche les outputs après l'application
          echo "\n\n--- Outputs de l'infrastructure ---"
          terraform output
        continue-on-error: false  # Arrête le workflow si l'application échoue

      # Étape 9: Destruction de l'infrastructure Terraform
      - name: Terraform Destroy
        id: destroy
        if: github.event.inputs.action == 'destroy'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          echo "::group::Terraform Destroy"
          terraform destroy -auto-approve \
            -var="aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var="aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="ec2_key_pair_name=${{ secrets.EC2_KEY_PAIR_NAME }}" \
            -var="ssh_public_key=${{ github.event.inputs.ssh_public_key || '' }}" \
            -var="github_token=${{ secrets.GH_PAT || '' }}" \
            -var="repo_owner=${{ github.repository_owner }}" \
            -var="repo_name=${{ github.repository }}"
          echo "::endgroup::"
        continue-on-error: false  # Arrête le workflow si la destruction échoue

      # Étape 10: Résumé de l'exécution
      - name: Summary
        run: |
          echo "## Résumé de l'exécution Terraform" >> $GITHUB_STEP_SUMMARY
          echo "* **Action exécutée:** ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Branche:** main" >> $GITHUB_STEP_SUMMARY
          echo "* **Région AWS:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Statut:** Succès ✅" >> $GITHUB_STEP_SUMMARY
