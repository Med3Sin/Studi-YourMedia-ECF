name: 3.1 - Canary Deployment

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target to deploy in canary mode'
        required: true
        default: 'mobile'
        type: choice
        options:
          - mobile
          - monitoring
      canary_percentage:
        description: 'Percentage of traffic to route to new version (10, 25, 50, 75, 100)'
        required: true
        default: '10'
        type: choice
        options:
          - '10'
          - '25'
          - '50'
          - '75'
          - '100'
      rollback_on_failure:
        description: 'Automatically rollback on failure'
        required: true
        default: true
        type: boolean
      monitoring_duration:
        description: 'Duration to monitor canary in minutes'
        required: true
        default: '15'
        type: choice
        options:
          - '5'
          - '15'
          - '30'
          - '60'

jobs:
  prepare-canary:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      previous_version: ${{ steps.previous_version.outputs.previous_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set version
        id: version
        run: |
          VERSION=$(date +%Y%m%d%H%M%S)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Get previous version
        id: previous_version
        run: |
          # Récupérer la version précédente depuis Docker Hub
          if [[ "${{ github.event.inputs.target }}" == "mobile" ]]; then
            PREVIOUS_VERSION=$(curl -s -H "Authorization: Bearer ${{ secrets.DOCKERHUB_TOKEN }}" "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/yourmedia-ecf/tags" | jq -r '.results[] | select(.name | startswith("mobile-")) | .name' | grep -v "latest" | head -1 | sed 's/mobile-//')
          else
            PREVIOUS_VERSION=$(curl -s -H "Authorization: Bearer ${{ secrets.DOCKERHUB_TOKEN }}" "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/yourmedia-ecf/tags" | jq -r '.results[] | select(.name | startswith("grafana-")) | .name' | grep -v "latest" | head -1 | sed 's/grafana-//')
          fi

          if [[ -z "$PREVIOUS_VERSION" ]]; then
            echo "No previous version found, using current version"
            PREVIOUS_VERSION=$VERSION
          fi

          echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          echo "Previous version: $PREVIOUS_VERSION"

      - name: Summary
        run: |
          echo "## Canary Deployment Preparation" >> $GITHUB_STEP_SUMMARY
          echo "* **Target:** ${{ github.event.inputs.target }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Canary Percentage:** ${{ github.event.inputs.canary_percentage }}%" >> $GITHUB_STEP_SUMMARY
          echo "* **Monitoring Duration:** ${{ github.event.inputs.monitoring_duration }} minutes" >> $GITHUB_STEP_SUMMARY
          echo "* **Auto Rollback:** ${{ github.event.inputs.rollback_on_failure }}" >> $GITHUB_STEP_SUMMARY
          echo "* **New Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Previous Version:** ${{ steps.previous_version.outputs.previous_version }}" >> $GITHUB_STEP_SUMMARY

  build-and-push:
    needs: prepare-canary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push mobile app image
      - name: Build and push mobile app image
        if: ${{ github.event.inputs.target == 'mobile' }}
        uses: docker/build-push-action@v4
        with:
          context: ./app-react
          file: ./app-react/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/yourmedia-ecf:mobile-${{ needs.prepare-canary.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/yourmedia-ecf:mobile-canary
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push monitoring images
      - name: Build and push Grafana image
        if: ${{ github.event.inputs.target == 'monitoring' }}
        uses: docker/build-push-action@v4
        with:
          context: ./scripts/docker/grafana
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/yourmedia-ecf:grafana-${{ needs.prepare-canary.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/yourmedia-ecf:grafana-canary
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Prometheus image
        if: ${{ github.event.inputs.target == 'monitoring' }}
        uses: docker/build-push-action@v4
        with:
          context: ./scripts/docker/prometheus
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/yourmedia-ecf:prometheus-${{ needs.prepare-canary.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/yourmedia-ecf:prometheus-canary
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push SonarQube image
        if: ${{ github.event.inputs.target == 'monitoring' }}
        uses: docker/build-push-action@v4
        with:
          context: ./scripts/docker/sonarqube
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/yourmedia-ecf:sonarqube-${{ needs.prepare-canary.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/yourmedia-ecf:sonarqube-canary
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Summary
        run: |
          echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "* **Target:** ${{ github.event.inputs.target }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Version:** ${{ needs.prepare-canary.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Docker Hub Repository:** https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/yourmedia-ecf" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event.inputs.target }}" == "mobile" ]]; then
            echo "* **Mobile App Image:** ${{ secrets.DOCKERHUB_USERNAME }}/yourmedia-ecf:mobile-${{ needs.prepare-canary.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "* **Grafana Image:** ${{ secrets.DOCKERHUB_USERNAME }}/yourmedia-ecf:grafana-${{ needs.prepare-canary.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "* **Prometheus Image:** ${{ secrets.DOCKERHUB_USERNAME }}/yourmedia-ecf:prometheus-${{ needs.prepare-canary.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "* **SonarQube Image:** ${{ secrets.DOCKERHUB_USERNAME }}/yourmedia-ecf:sonarqube-${{ needs.prepare-canary.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          fi

  deploy-canary:
    needs: [prepare-canary, build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          # Supprimer les guillemets simples qui pourraient être présents dans la clé
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | sed "s/'//g" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.TF_EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ secrets.TF_MONITORING_EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Create canary deployment script
        run: |
          cat > deploy-canary.sh << 'EOF'
          #!/bin/bash

          # Variables
          TARGET=$1
          CANARY_PERCENTAGE=$2
          NEW_VERSION=$3
          PREVIOUS_VERSION=$4
          DOCKERHUB_USERNAME=$5
          DOCKERHUB_TOKEN=$6

          # Fonction pour déployer le canary
          deploy_canary() {
            local ip=$1
            local target=$2
            local percentage=$3
            local new_version=$4
            local previous_version=$5

            echo "[INFO] Déploiement canary sur l'instance $target ($ip) avec $percentage% de trafic vers la version $new_version"

            # Se connecter à l'instance EC2 et déployer le canary
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$ip << EOSSH
              # Créer le répertoire de configuration
              sudo mkdir -p /opt/canary

              # Se connecter à Docker Hub
              echo "[INFO] Connexion à Docker Hub..."
              echo "$DOCKERHUB_TOKEN" | sudo docker login -u "$DOCKERHUB_USERNAME" --password-stdin

              # Créer le fichier docker-compose.yml pour le canary
              if [ "$target" == "mobile" ]; then
                echo "[INFO] Création du fichier docker-compose.yml pour l'application mobile..."
                cat > /tmp/docker-compose.canary.yml << 'EOYAML'
          version: '3.8'

          services:
            app-stable:
              image: ${DOCKERHUB_USERNAME}/yourmedia-ecf:mobile-${previous_version}
              restart: always
              environment:
                - NODE_ENV=production
                - API_URL=http://backend:8080
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.app-stable.rule=Host(\`app.yourmedia.local\`) && Weight(${100-percentage})"
                - "traefik.http.services.app-stable.loadbalancer.server.port=3000"

            app-canary:
              image: ${DOCKERHUB_USERNAME}/yourmedia-ecf:mobile-${new_version}
              restart: always
              environment:
                - NODE_ENV=production
                - API_URL=http://backend:8080
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.app-canary.rule=Host(\`app.yourmedia.local\`) && Weight(${percentage})"
                - "traefik.http.services.app-canary.loadbalancer.server.port=3000"

            traefik:
              image: traefik:v2.9
              command:
                - "--api.insecure=true"
                - "--providers.docker=true"
                - "--providers.docker.exposedbydefault=false"
                - "--entrypoints.web.address=:80"
              ports:
                - "80:80"
                - "8080:8080"
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock:ro
          EOYAML
                sudo mv /tmp/docker-compose.canary.yml /opt/canary/docker-compose.yml
              else
                echo "[INFO] Création du fichier docker-compose.yml pour le monitoring..."
                cat > /tmp/docker-compose.canary.yml << 'EOYAML'
          version: '3.8'

          services:
            grafana-stable:
              image: ${DOCKERHUB_USERNAME}/yourmedia-ecf:grafana-${previous_version}
              restart: always
              environment:
                - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.grafana-stable.rule=Host(\`grafana.yourmedia.local\`) && Weight(${100-percentage})"
                - "traefik.http.services.grafana-stable.loadbalancer.server.port=3000"

            grafana-canary:
              image: ${DOCKERHUB_USERNAME}/yourmedia-ecf:grafana-${new_version}
              restart: always
              environment:
                - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.grafana-canary.rule=Host(\`grafana.yourmedia.local\`) && Weight(${percentage})"
                - "traefik.http.services.grafana-canary.loadbalancer.server.port=3000"

            prometheus-stable:
              image: ${DOCKERHUB_USERNAME}/yourmedia-ecf:prometheus-${previous_version}
              restart: always
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.prometheus-stable.rule=Host(\`prometheus.yourmedia.local\`) && Weight(${100-percentage})"
                - "traefik.http.services.prometheus-stable.loadbalancer.server.port=9090"

            prometheus-canary:
              image: ${DOCKERHUB_USERNAME}/yourmedia-ecf:prometheus-${new_version}
              restart: always
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.prometheus-canary.rule=Host(\`prometheus.yourmedia.local\`) && Weight(${percentage})"
                - "traefik.http.services.prometheus-canary.loadbalancer.server.port=9090"

            sonarqube-stable:
              image: ${DOCKERHUB_USERNAME}/yourmedia-ecf:sonarqube-${previous_version}
              restart: always
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.sonarqube-stable.rule=Host(\`sonarqube.yourmedia.local\`) && Weight(${100-percentage})"
                - "traefik.http.services.sonarqube-stable.loadbalancer.server.port=9000"

            sonarqube-canary:
              image: ${DOCKERHUB_USERNAME}/yourmedia-ecf:sonarqube-${new_version}
              restart: always
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.sonarqube-canary.rule=Host(\`sonarqube.yourmedia.local\`) && Weight(${percentage})"
                - "traefik.http.services.sonarqube-canary.loadbalancer.server.port=9000"

            traefik:
              image: traefik:v2.9
              command:
                - "--api.insecure=true"
                - "--providers.docker=true"
                - "--providers.docker.exposedbydefault=false"
                - "--entrypoints.web.address=:80"
              ports:
                - "80:80"
                - "8080:8080"
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock:ro
          EOYAML
                sudo mv /tmp/docker-compose.canary.yml /opt/canary/docker-compose.yml
              fi

              # Remplacer les variables dans le fichier docker-compose.yml
              sudo sed -i "s/\${DOCKERHUB_USERNAME}/$DOCKERHUB_USERNAME/g" /opt/canary/docker-compose.yml
              sudo sed -i "s/\${previous_version}/$previous_version/g" /opt/canary/docker-compose.yml
              sudo sed -i "s/\${new_version}/$new_version/g" /opt/canary/docker-compose.yml
              sudo sed -i "s/\${percentage}/$percentage/g" /opt/canary/docker-compose.yml
              sudo sed -i "s/\${100-percentage}/$((100-percentage))/g" /opt/canary/docker-compose.yml

              # Démarrer les conteneurs canary
              echo "[INFO] Démarrage des conteneurs canary..."
              cd /opt/canary
              sudo docker-compose up -d

              echo "[INFO] Déploiement canary terminé."
          EOSSH
          }

          # Déployer le canary sur l'instance appropriée
          if [ "$TARGET" == "mobile" ]; then
            deploy_canary "${{ secrets.TF_EC2_PUBLIC_IP }}" "$TARGET" "$CANARY_PERCENTAGE" "$NEW_VERSION" "$PREVIOUS_VERSION" "$DOCKERHUB_USERNAME" "$DOCKERHUB_TOKEN"
          else
            deploy_canary "${{ secrets.TF_MONITORING_EC2_PUBLIC_IP }}" "$TARGET" "$CANARY_PERCENTAGE" "$NEW_VERSION" "$PREVIOUS_VERSION" "$DOCKERHUB_USERNAME" "$DOCKERHUB_TOKEN"
          fi
          EOF

          chmod +x deploy-canary.sh

      - name: Deploy canary
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          GF_SECURITY_ADMIN_PASSWORD: ${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}
        run: |
          ./deploy-canary.sh "${{ github.event.inputs.target }}" "${{ github.event.inputs.canary_percentage }}" "${{ needs.prepare-canary.outputs.version }}" "${{ needs.prepare-canary.outputs.previous_version }}" "${{ secrets.DOCKERHUB_USERNAME }}" "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: Monitor canary
        id: monitor
        run: |
          echo "Monitoring canary deployment for ${{ github.event.inputs.monitoring_duration }} minutes..."

          # Créer un script de surveillance
          cat > monitor-canary.sh << 'EOF'
          #!/bin/bash

          TARGET=$1
          DURATION_MINUTES=$2
          IP=$3

          # Convertir les minutes en secondes
          DURATION_SECONDS=$((DURATION_MINUTES * 60))
          END_TIME=$(($(date +%s) + DURATION_SECONDS))

          # Fonction pour vérifier l'état de santé
          check_health() {
            local ip=$1
            local service=$2
            local port=$3

            # Vérifier si le service répond
            curl -s -o /dev/null -w "%{http_code}" http://$ip:$port/
          }

          # Surveiller le canary
          echo "Début de la surveillance du canary pour $DURATION_MINUTES minutes..."

          FAILURE=false

          while [ $(date +%s) -lt $END_TIME ]; do
            if [ "$TARGET" == "mobile" ]; then
              # Vérifier l'application mobile
              STATUS=$(check_health $IP 3000)
              if [ "$STATUS" != "200" ]; then
                echo "ERREUR: L'application mobile ne répond pas correctement (code $STATUS)"
                FAILURE=true
                break
              fi
            else
              # Vérifier Grafana
              STATUS=$(check_health $IP 3000)
              if [ "$STATUS" != "200" ]; then
                echo "ERREUR: Grafana ne répond pas correctement (code $STATUS)"
                FAILURE=true
                break
              fi

              # Vérifier Prometheus
              STATUS=$(check_health $IP 9090)
              if [ "$STATUS" != "200" ]; then
                echo "ERREUR: Prometheus ne répond pas correctement (code $STATUS)"
                FAILURE=true
                break
              fi

              # Vérifier SonarQube
              STATUS=$(check_health $IP 9000)
              if [ "$STATUS" != "200" ]; then
                echo "ERREUR: SonarQube ne répond pas correctement (code $STATUS)"
                FAILURE=true
                break
              fi
            fi

            echo "Surveillance en cours... $(( (END_TIME - $(date +%s)) / 60 )) minutes restantes"
            sleep 30
          done

          if [ "$FAILURE" == "true" ]; then
            echo "La surveillance a détecté des problèmes avec le canary."
            exit 1
          else
            echo "La surveillance du canary est terminée avec succès."
            exit 0
          fi
          EOF

          chmod +x monitor-canary.sh

          # Exécuter le script de surveillance
          if [ "${{ github.event.inputs.target }}" == "mobile" ]; then
            ./monitor-canary.sh "${{ github.event.inputs.target }}" "${{ github.event.inputs.monitoring_duration }}" "${{ secrets.TF_EC2_PUBLIC_IP }}" || echo "::set-output name=status::failure"
          else
            ./monitor-canary.sh "${{ github.event.inputs.target }}" "${{ github.event.inputs.monitoring_duration }}" "${{ secrets.TF_MONITORING_EC2_PUBLIC_IP }}" || echo "::set-output name=status::failure"
          fi

      - name: Rollback on failure
        if: ${{ github.event.inputs.rollback_on_failure == 'true' && steps.monitor.outputs.status == 'failure' }}
        run: |
          echo "Rollback du déploiement canary..."

          # Créer un script de rollback
          cat > rollback-canary.sh << 'EOF'
          #!/bin/bash

          TARGET=$1
          IP=$2

          # Fonction pour effectuer le rollback
          rollback() {
            local ip=$1

            echo "[INFO] Rollback du déploiement canary sur l'instance $ip"

            # Se connecter à l'instance EC2 et effectuer le rollback
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$ip << EOSSH
              echo "[INFO] Arrêt des conteneurs canary..."
              cd /opt/canary
              sudo docker-compose down

              echo "[INFO] Suppression du répertoire canary..."
              sudo rm -rf /opt/canary

              echo "[INFO] Rollback terminé."
          EOSSH
          }

          # Effectuer le rollback sur l'instance appropriée
          if [ "$TARGET" == "mobile" ]; then
            rollback "$IP"
          else
            rollback "$IP"
          fi
          EOF

          chmod +x rollback-canary.sh

          # Exécuter le script de rollback
          if [ "${{ github.event.inputs.target }}" == "mobile" ]; then
            ./rollback-canary.sh "${{ github.event.inputs.target }}" "${{ secrets.TF_EC2_PUBLIC_IP }}"
          else
            ./rollback-canary.sh "${{ github.event.inputs.target }}" "${{ secrets.TF_MONITORING_EC2_PUBLIC_IP }}"
          fi

      - name: Promote canary to production
        if: ${{ steps.monitor.outputs.status != 'failure' }}
        run: |
          echo "Promotion du canary vers la production..."

          # Créer un script de promotion
          cat > promote-canary.sh << 'EOF'
          #!/bin/bash

          TARGET=$1
          VERSION=$2
          IP=$3
          DOCKERHUB_USERNAME=$4

          # Fonction pour promouvoir le canary
          promote() {
            local ip=$1
            local target=$2
            local version=$3

            echo "[INFO] Promotion du canary vers la production sur l'instance $ip"

            # Se connecter à l'instance EC2 et promouvoir le canary
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$ip << EOSSH
              echo "[INFO] Arrêt des conteneurs canary..."
              cd /opt/canary
              sudo docker-compose down

              echo "[INFO] Mise à jour des images de production..."
              if [ "$target" == "mobile" ]; then
                # Mettre à jour l'image de l'application mobile
                sudo docker pull $DOCKERHUB_USERNAME/yourmedia-ecf:mobile-$version
                sudo docker tag $DOCKERHUB_USERNAME/yourmedia-ecf:mobile-$version $DOCKERHUB_USERNAME/yourmedia-ecf:mobile-latest

                # Redémarrer le conteneur de production
                cd /opt/app-mobile
                sudo docker-compose up -d
              else
                # Mettre à jour les images de monitoring
                sudo docker pull $DOCKERHUB_USERNAME/yourmedia-ecf:grafana-$version
                sudo docker tag $DOCKERHUB_USERNAME/yourmedia-ecf:grafana-$version $DOCKERHUB_USERNAME/yourmedia-ecf:grafana-latest

                sudo docker pull $DOCKERHUB_USERNAME/yourmedia-ecf:prometheus-$version
                sudo docker tag $DOCKERHUB_USERNAME/yourmedia-ecf:prometheus-$version $DOCKERHUB_USERNAME/yourmedia-ecf:prometheus-latest

                sudo docker pull $DOCKERHUB_USERNAME/yourmedia-ecf:sonarqube-$version
                sudo docker tag $DOCKERHUB_USERNAME/yourmedia-ecf:sonarqube-$version $DOCKERHUB_USERNAME/yourmedia-ecf:sonarqube-latest

                # Redémarrer les conteneurs de production
                cd /opt/monitoring
                sudo docker-compose up -d
              fi

              echo "[INFO] Suppression du répertoire canary..."
              sudo rm -rf /opt/canary

              echo "[INFO] Promotion terminée."
          EOSSH
          }

          # Promouvoir le canary sur l'instance appropriée
          if [ "$TARGET" == "mobile" ]; then
            promote "$IP" "$TARGET" "$VERSION" "$DOCKERHUB_USERNAME"
          else
            promote "$IP" "$TARGET" "$VERSION" "$DOCKERHUB_USERNAME"
          fi
          EOF

          chmod +x promote-canary.sh

          # Exécuter le script de promotion
          if [ "${{ github.event.inputs.target }}" == "mobile" ]; then
            ./promote-canary.sh "${{ github.event.inputs.target }}" "${{ needs.prepare-canary.outputs.version }}" "${{ secrets.TF_EC2_PUBLIC_IP }}" "${{ secrets.DOCKERHUB_USERNAME }}"
          else
            ./promote-canary.sh "${{ github.event.inputs.target }}" "${{ needs.prepare-canary.outputs.version }}" "${{ secrets.TF_MONITORING_EC2_PUBLIC_IP }}" "${{ secrets.DOCKERHUB_USERNAME }}"
          fi

      - name: Summary
        run: |
          echo "## Canary Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "* **Target:** ${{ github.event.inputs.target }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Canary Percentage:** ${{ github.event.inputs.canary_percentage }}%" >> $GITHUB_STEP_SUMMARY
          echo "* **Monitoring Duration:** ${{ github.event.inputs.monitoring_duration }} minutes" >> $GITHUB_STEP_SUMMARY
          echo "* **Version:** ${{ needs.prepare-canary.outputs.version }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.monitor.outputs.status }}" == "failure" ]]; then
            echo "* **Status:** ❌ FAILED - Rollback performed" >> $GITHUB_STEP_SUMMARY
          else
            echo "* **Status:** ✅ SUCCESS - Promoted to production" >> $GITHUB_STEP_SUMMARY
          fi
