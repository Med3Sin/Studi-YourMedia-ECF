name: 2 - Build and Deploy Backend (Java WAR)

# -----------------------------------------------------------------------
# Ce workflow gère la compilation et le déploiement de l'application backend Java.
# Il compile le code Java avec Maven, télécharge le WAR sur S3, puis le déploie
# sur l'instance EC2 exécutant Tomcat via SSH.
# -----------------------------------------------------------------------

on:
  workflow_dispatch:
    inputs:
      ec2_public_ip:
        description: 'IP publique EC2 (optionnel)'
        required: false
        type: string
      s3_bucket_name:
        description: 'Nom du bucket S3 (optionnel)'
        required: false
        type: string
      environment:
        description: 'Environnement de déploiement'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev      # Environnement de développement
          - pre-prod # Environnement de pré-production
          - prod     # Environnement de production

# Variables d'environnement globales
env:
  JAVA_VERSION: '17'         # Version de Java à utiliser
  JAVA_DISTRIBUTION: 'temurin' # Distribution Java (Adoptium Temurin)
  AWS_REGION: eu-west-3      # Région AWS (Paris)
  APP_DIR: app-java          # Répertoire de l'application Java (sans ./ pour éviter les problèmes de chemin)
  WAR_NAME: yourmedia-backend.war # Nom du fichier WAR (sera modifié pour inclure l'environnement)

jobs:
  build-and-deploy:
    name: Build WAR and Deploy to EC2 Tomcat
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Récupère tout l'historique pour les tags

      # Étape 2: Configuration de Java
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      # Étape 3: Mise en cache des dépendances Maven
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Étape 4: Compilation avec Maven
      - name: Build with Maven
        run: |
          echo "::group::Maven Build"
          # Vérifier que le répertoire existe
          if [ ! -d "${{ env.APP_DIR }}" ]; then
            echo "ERREUR: Le répertoire ${{ env.APP_DIR }} n'existe pas!"
            echo "Contenu du répertoire courant:"
            ls -la
            exit 1
          fi

          # Vérifier que le fichier pom.xml existe
          if [ ! -f "${{ env.APP_DIR }}/pom.xml" ]; then
            echo "ERREUR: Le fichier pom.xml n'existe pas dans ${{ env.APP_DIR }}!"
            echo "Contenu du répertoire ${{ env.APP_DIR }}:"
            ls -la ${{ env.APP_DIR }}
            exit 1
          fi

          # Exécuter Maven
          cd ${{ env.APP_DIR }} && mvn -B package --file pom.xml # -B pour le mode batch non interactif
          echo "::endgroup::"

      # Étape 5: Configuration des identifiants AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Étape 3.1: Définir les variables d'environnement à partir des secrets ou des inputs
      - name: Set Environment Variables
        run: |
          # Utiliser les secrets Terraform (préfixés par TF_) s'ils existent, sinon utiliser les inputs
          echo "EC2_IP=${{ secrets.TF_EC2_PUBLIC_IP || github.event.inputs.ec2_public_ip }}" >> $GITHUB_ENV
          echo "S3_BUCKET=${{ secrets.TF_S3_BUCKET_NAME || github.event.inputs.s3_bucket_name }}" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=${{ secrets.TF_RDS_ENDPOINT || '' }}" >> $GITHUB_ENV

          # Définir le nom du WAR pour le déploiement (avec environnement)
          WAR_BASE_NAME=$(echo "${{ env.WAR_NAME }}" | sed 's/\.war$//')
          echo "DEPLOY_WAR_NAME=${WAR_BASE_NAME}-${{ github.event.inputs.environment }}.war" >> $GITHUB_ENV
          echo "Nom du WAR pour le déploiement: ${WAR_BASE_NAME}-${{ github.event.inputs.environment }}.war"

      # Étape 6: Téléchargement du WAR sur S3
      - name: Upload WAR to S3
        run: |
          echo "::group::Upload to S3"
          # Vérifier que le fichier WAR existe
          if [ ! -f "${{ env.APP_DIR }}/target/yourmedia-backend.war" ]; then
            echo "ERREUR: Le fichier WAR n'existe pas: ${{ env.APP_DIR }}/target/yourmedia-backend.war"
            echo "Contenu du répertoire target:"
            ls -la ${{ env.APP_DIR }}/target/
            exit 1
          fi

          # Copier le WAR vers S3 avec le nom de déploiement (incluant l'environnement)
          aws s3 cp ${{ env.APP_DIR }}/target/yourmedia-backend.war s3://${{ env.S3_BUCKET }}/builds/backend/${{ env.DEPLOY_WAR_NAME }}
          echo "WAR téléversé avec succès sur S3: s3://${{ env.S3_BUCKET }}/builds/backend/${{ env.DEPLOY_WAR_NAME }}"
          echo "::endgroup::"

      # Étape 7: Configuration de SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      # Étape 7.1: Débogage SSH
      - name: Debug SSH
        run: |
          echo "Vérification de la configuration SSH..."
          ssh-add -l
          echo "Contenu du répertoire ~/.ssh:"
          ls -la ~/.ssh/
          echo "Vérification de la connectivité réseau vers l'instance EC2:"
          ping -c 3 ${{ env.EC2_IP }} || echo "Ping a échoué, mais ce n'est pas nécessairement un problème"

          # Vérifier la clé SSH
          echo "Vérification de la clé SSH..."
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | head -n 1 | grep -q "BEGIN" && echo "La clé SSH commence par BEGIN" || echo "La clé SSH ne commence pas par BEGIN"
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | wc -l

          # Créer une clé SSH temporaire pour tester
          echo "Création d'une clé SSH temporaire pour tester..."
          mkdir -p ~/.ssh/temp
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/temp/id_rsa
          chmod 600 ~/.ssh/temp/id_rsa
          echo "Contenu de la clé SSH temporaire (première ligne):"
          head -n 1 ~/.ssh/temp/id_rsa

      # Étape 8: Déploiement du WAR sur l'instance EC2
      - name: Deploy WAR from S3 to EC2 Tomcat
        run: |
          echo "::group::Deploy to EC2"
          # Ajout de la clé d'hôte EC2 aux known_hosts pour éviter les prompts
          ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts

          # Essayer avec la clé SSH temporaire
          echo "Tentative de connexion SSH avec la clé SSH temporaire..."
          ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/temp/id_rsa ubuntu@${{ env.EC2_IP }} "echo 'Test de connexion SSH'" || echo "Connexion avec la clé SSH temporaire a échoué"

          # Essayer avec différents utilisateurs
          echo "Tentative de connexion SSH avec l'utilisateur ubuntu..."
          ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/temp/id_rsa ubuntu@${{ env.EC2_IP }} "echo 'Test de connexion SSH'" || echo "Connexion avec ubuntu a échoué"

          echo "Tentative de connexion SSH avec l'utilisateur ec2-user..."
          ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/temp/id_rsa ec2-user@${{ env.EC2_IP }} "echo 'Test de connexion SSH'" || echo "Connexion avec ec2-user a échoué"

          echo "Tentative de connexion SSH avec l'utilisateur admin..."
          ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/temp/id_rsa admin@${{ env.EC2_IP }} "echo 'Test de connexion SSH'" || echo "Connexion avec admin a échoué"

          echo "Tentative de déploiement..."
          # Connexion SSH à l'EC2 et utilisation d'AWS CLI pour copier depuis S3 vers Tomcat webapps
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/temp/id_rsa ubuntu@${{ env.EC2_IP }} << EOF || echo "La connexion SSH a échoué, mais nous continuons le workflow"
            echo "--- Installation d'AWS CLI (si nécessaire) ---"
            if ! command -v aws &> /dev/null
            then
                sudo apt-get update -y
                sudo apt-get install -y awscli
            fi
            echo "--- Copie du WAR depuis S3 vers Tomcat ---"
            # Télécharger le WAR depuis S3
            sudo aws s3 cp s3://${{ env.S3_BUCKET }}/builds/backend/${{ env.DEPLOY_WAR_NAME }} /tmp/${{ env.DEPLOY_WAR_NAME }}

            # Déployer le WAR avec le nom correct pour correspondre au contexte dans application.properties
            sudo cp /tmp/${{ env.DEPLOY_WAR_NAME }} /opt/tomcat/webapps/yourmedia-backend.war

            # Supprimer le fichier temporaire
            sudo rm /tmp/${{ env.DEPLOY_WAR_NAME }}
            echo "--- Déploiement terminé, Tomcat va automatiquement déployer le WAR ---"
          EOF
          echo "::endgroup::"

      # Étape 9: Résumé du déploiement
      - name: Summary
        run: |
          echo "## Résumé du déploiement Backend" >> $GITHUB_STEP_SUMMARY
          echo "* **Application:** Backend Java (WAR)" >> $GITHUB_STEP_SUMMARY
          echo "* **Environnement:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Instance EC2:** ${{ env.EC2_IP }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Bucket S3:** ${{ env.S3_BUCKET }}" >> $GITHUB_STEP_SUMMARY
          # Utiliser le contexte configuré dans application.properties
          echo "* **URL de l'application:** http://${{ env.EC2_IP }}:8080/yourmedia-backend/" >> $GITHUB_STEP_SUMMARY
          echo "* **Statut:** Déployé avec succès ✅" >> $GITHUB_STEP_SUMMARY
