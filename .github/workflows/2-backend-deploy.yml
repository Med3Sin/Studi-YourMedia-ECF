name: 2 - Compilation et Déploiement de l'Application Hello World (Java WAR)

on:
  workflow_dispatch:
    inputs:
      ec2_public_ip:
        description: 'IP publique EC2 (optionnel)'
        required: false
        type: string
      s3_bucket_name:
        description: 'Nom du bucket S3 (optionnel)'
        required: false
        type: string
      environment:
        description: 'Environnement de déploiement'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - pre-prod
          - prod

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'
  AWS_REGION: eu-west-3
  APP_DIR: app-java
  WAR_NAME: hello-world.war

jobs:
  build-and-deploy:
    name: Compilation du WAR et Déploiement sur EC2 Tomcat
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Étape 2: Configuration de Java
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      # Étape 3: Mise en cache des dépendances Maven
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Étape 4: Compilation avec Maven
      - name: Build with Maven
        run: |
          echo "group=Maven Build" >> $GITHUB_STEP_SUMMARY
          # Vérifier que le répertoire existe
          if [ ! -d "${{ env.APP_DIR }}" ]; then
            echo "ERREUR: Le répertoire ${{ env.APP_DIR }} n'existe pas!"
            echo "Contenu du répertoire courant (avant cd):"
            ls -la
            exit 1
          fi

          # Aller dans le répertoire de l'application
          cd ${{ env.APP_DIR }}
          echo "Répertoire courant après cd: $(pwd)"

          # Vérifier que le fichier pom.xml existe
          if [ ! -f "pom.xml" ]; then # pom.xml est maintenant relatif au répertoire courant (APP_DIR)
            echo "ERREUR: Le fichier pom.xml n'existe pas dans $(pwd)!"
            echo "Contenu du répertoire $(pwd):"
            ls -la
            exit 1
          fi

          # Exécuter Maven avec les dépendances
          mvn -B clean package --file pom.xml
          
          echo ""
          echo "--- Vérification de l'existence du WAR ---"
          if [ -f "target/hello-world.war" ]; then
            echo "INFO: Le fichier target/hello-world.war existe."
            echo "Taille: $(ls -lh target/hello-world.war)"
          else
            echo "ERREUR CRITIQUE: Le fichier target/hello-world.war N'EXISTE PAS après la compilation Maven."
            echo "Contenu du répertoire target/ :"
            ls -la target/
            exit 1
          fi
          echo "--- Fin de la vérification de l'existence du WAR ---"
          echo ""
          
          echo "--- Contenu complet de target/hello-world.war (brut via unzip -l) ---"
          # Rediriger stderr vers stdout pour capturer les erreurs de unzip
          unzip -l target/hello-world.war 2>&1 || echo "AVERTISSEMENT: La commande 'unzip -l target/hello-world.war' a échoué ou n'a rien retourné."
          echo "--- Fin du contenu complet du WAR ---"
          echo ""
          
          echo "Vérification des dépendances Actuator et Micrometer..."
          
          # MODIFICATION ICI: BOOT-INF/lib/ -> WEB-INF/lib/
          ACTUATOR_JAR_PATTERN="WEB-INF/lib/spring-boot-actuator-autoconfigure-[^/]*\.jar"
          MICROMETER_JAR_PATTERN="WEB-INF/lib/micrometer-registry-prometheus-[^/]*\.jar"

          # Vérification du JAR Actuator
          actuator_jar_found=$(unzip -l target/hello-world.war 2>&1 | grep -E "$ACTUATOR_JAR_PATTERN")
          if [ -z "$actuator_jar_found" ]; then
            echo "ERREUR: Le JAR spring-boot-actuator-autoconfigure (pattern: $ACTUATOR_JAR_PATTERN) n'est pas trouvé dans le WAR."
            exit 1
          else
            echo "INFO: JAR Actuator trouvé:"
            echo "$actuator_jar_found"
          fi
          
          # Vérification du JAR Micrometer
          micrometer_jar_found=$(unzip -l target/hello-world.war 2>&1 | grep -E "$MICROMETER_JAR_PATTERN")
          if [ -z "$micrometer_jar_found" ]; then
            echo "ERREUR: Le JAR micrometer-registry-prometheus (pattern: $MICROMETER_JAR_PATTERN) n'est pas trouvé dans le WAR."
            exit 1
          else
            echo "INFO: JAR Micrometer trouvé:"
            echo "$micrometer_jar_found"
          fi
          
          echo "Les dépendances Actuator et Micrometer ont été vérifiées avec succès dans le WAR."
          
          echo "endgroup" >> $GITHUB_STEP_SUMMARY

      # Étape 5: Configuration des identifiants AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Étape 3.1: Définir les variables d'environnement à partir des secrets ou des inputs
      - name: Set Environment Variables
        run: |
          echo "EC2_IP=${{ secrets.TF_EC2_PUBLIC_IP || github.event.inputs.ec2_public_ip }}" >> $GITHUB_ENV
          echo "S3_BUCKET=${{ secrets.TF_S3_BUCKET_NAME || github.event.inputs.s3_bucket_name }}" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=${{ secrets.TF_RDS_ENDPOINT || '' }}" >> $GITHUB_ENV
          WAR_BASE_NAME=$(echo "${{ env.WAR_NAME }}" | sed 's/\.war$//')
          echo "DEPLOY_WAR_NAME=${WAR_BASE_NAME}-${{ github.event.inputs.environment }}.war" >> $GITHUB_ENV
          echo "Nom du WAR pour le déploiement: ${WAR_BASE_NAME}-${{ github.event.inputs.environment }}.war"

      # Étape 6: Téléchargement du WAR sur S3
      - name: Upload WAR to S3
        run: |
          echo "group=Upload to S3" >> $GITHUB_STEP_SUMMARY
          if [ ! -f "${{ env.APP_DIR }}/target/hello-world.war" ]; then
            echo "ERREUR: Le fichier WAR n'existe pas: ${{ env.APP_DIR }}/target/hello-world.war"
            echo "Contenu du répertoire ${{ env.APP_DIR }}/target/ (si existant):"
            ls -la ${{ env.APP_DIR }}/target/
            exit 1
          fi
          aws s3 cp ${{ env.APP_DIR }}/target/hello-world.war s3://${{ env.S3_BUCKET }}/builds/backend/${{ env.DEPLOY_WAR_NAME }}
          echo "WAR téléversé avec succès sur S3: s3://${{ env.S3_BUCKET }}/builds/backend/${{ env.DEPLOY_WAR_NAME }}"
          echo "endgroup" >> $GITHUB_STEP_SUMMARY

      # Étape 7: Configuration de SSH simplifiée
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts
          echo "Configuration SSH terminée."

      # Étape 9: Déploiement du WAR sur l'instance EC2
      - name: Deploy WAR from S3 to EC2 Tomcat
        run: |
          echo "group=Deploy to EC2" >> $GITHUB_STEP_SUMMARY
          echo "Déploiement du WAR sur l'instance EC2..."
          echo "Téléchargement du WAR depuis S3..."
          aws s3 cp s3://${{ env.S3_BUCKET }}/builds/backend/${{ env.DEPLOY_WAR_NAME }} /tmp/${{ env.DEPLOY_WAR_NAME }}
          echo "Copie du WAR vers l'instance EC2..."
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa /tmp/${{ env.DEPLOY_WAR_NAME }} ec2-user@${{ env.EC2_IP }}:/tmp/${{ env.DEPLOY_WAR_NAME }}
          echo "Déploiement du WAR avec le script deploy-war.sh..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ env.EC2_IP }} "sudo /opt/yourmedia/deploy-war.sh /tmp/${{ env.DEPLOY_WAR_NAME }}"
          echo "Déploiement terminé."
          echo "endgroup" >> $GITHUB_STEP_SUMMARY

      # Étape 10: Extraction du nom de l'application à partir du nom du WAR
      - name: Extract App Name
        run: |
          APP_NAME=$(echo "${{ env.DEPLOY_WAR_NAME }}" | sed 's/\.war$//')
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "Nom de l'application extrait: $APP_NAME"

      # Étape 11: Vérification de l'application déployée
      - name: Verify Deployment
        run: |
          echo "group=Vérification du déploiement" >> $GITHUB_STEP_SUMMARY
          echo "Attente de la disponibilité de l'application..."
          sleep 30

          echo "Vérification de l'application..."
          MAX_ATTEMPTS=10
          ATTEMPT=1
          SUCCESS=false

          APPLICATION_PROPERTIES_PATH="${{ env.APP_DIR }}/src/main/resources/application.properties"
          PROPERTY_KEY_ACTUATOR_BASE="management.endpoints.web.base-path"
          PROPERTY_KEY_SPRING_CONTEXT="server.servlet.context-path"

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Tentative $ATTEMPT/$MAX_ATTEMPTS..."
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.EC2_IP }}:8080/${{ env.APP_NAME }}/)
            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ L'application est accessible (HTTP 200)"
              
              ACTUATOR_BASE_PATH_VALUE=$(grep "$PROPERTY_KEY_ACTUATOR_BASE" "$APPLICATION_PROPERTIES_PATH" | cut -d'=' -f2)
              if [ -z "$ACTUATOR_BASE_PATH_VALUE" ]; then
                ACTUATOR_BASE_PATH_VALUE="/actuator" 
              fi
              
              ACTUATOR_URL="http://${{ env.EC2_IP }}:8080/${{ env.APP_NAME }}${ACTUATOR_BASE_PATH_VALUE}"
              echo "Vérification de l'endpoint Actuator à l'URL: ${ACTUATOR_URL}"
              ACTUATOR_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${ACTUATOR_URL})
              
              if [ "$ACTUATOR_CODE" = "200" ]; then
                echo "✅ L'endpoint Actuator est accessible (HTTP 200)"
                SUCCESS=true
                break
              else
                echo "⚠️ L'endpoint Actuator n'est pas accessible (HTTP $ACTUATOR_CODE) à l'URL ${ACTUATOR_URL}"
                SPRING_CONTEXT_PATH_VALUE=$(grep "$PROPERTY_KEY_SPRING_CONTEXT" "$APPLICATION_PROPERTIES_PATH" | cut -d'=' -f2)
                if [ -n "$SPRING_CONTEXT_PATH_VALUE" ] && [ "/${{ env.APP_NAME }}" != "$SPRING_CONTEXT_PATH_VALUE" ]; then
                   ALTERNATIVE_ACTUATOR_URL="http://${{ env.EC2_IP }}:8080${SPRING_CONTEXT_PATH_VALUE}${ACTUATOR_BASE_PATH_VALUE}"
                   echo "Tentative avec l'URL alternative de l'Actuator: ${ALTERNATIVE_ACTUATOR_URL}"
                   ACTUATOR_CODE_ALT=$(curl -s -o /dev/null -w "%{http_code}" ${ALTERNATIVE_ACTUATOR_URL})
                   if [ "$ACTUATOR_CODE_ALT" = "200" ]; then
                     echo "✅ L'endpoint Actuator est accessible via l'URL alternative (HTTP 200)"
                     SUCCESS=true
                     break
                   else
                     echo "⚠️ L'endpoint Actuator n'est pas accessible via l'URL alternative (HTTP $ACTUATOR_CODE_ALT)"
                   fi
                fi
              fi
            else
              echo "⚠️ L'application n'est pas accessible (HTTP $HTTP_CODE) à http://${{ env.EC2_IP }}:8080/${{ env.APP_NAME }}/"
            fi

            ATTEMPT=$((ATTEMPT+1))
            if [ $ATTEMPT -le $MAX_ATTEMPTS ]; then
              echo "Attente avant la prochaine tentative..."
              sleep 10
            fi
          done

          if [ "$SUCCESS" = "false" ]; then
            echo "❌ L'application ou l'endpoint Actuator n'est pas accessible après $MAX_ATTEMPTS tentatives"
            # Consider failing the workflow if critical: exit 1
          fi
          echo "endgroup" >> $GITHUB_STEP_SUMMARY

      # Étape 12: Résumé du déploiement
      - name: Summary
        run: |
          echo "## Résumé du déploiement Backend" >> $GITHUB_STEP_SUMMARY
          echo "* **Application:** Backend Java (WAR)" >> $GITHUB_STEP_SUMMARY
          echo "* **Environnement:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Instance EC2:** ${{ env.EC2_IP }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Bucket S3:** ${{ env.S3_BUCKET }}" >> $GITHUB_STEP_SUMMARY
          
          FINAL_CONTEXT_PATH="${{ env.APP_NAME }}"
          HEALTH_API_URL="http://${{ env.EC2_IP }}:8080/${FINAL_CONTEXT_PATH}/api/health"
          
          echo "* **URL de l'application (index):** http://${{ env.EC2_IP }}:8080/${FINAL_CONTEXT_PATH}/" >> $GITHUB_STEP_SUMMARY
          echo "* **URL de l'API Health:** ${HEALTH_API_URL}" >> $GITHUB_STEP_SUMMARY
          echo "* **Statut:** Déployé (vérifiez les logs de l'étape 'Verify Deployment' pour le statut d'accessibilité)" >> $GITHUB_STEP_SUMMARY
