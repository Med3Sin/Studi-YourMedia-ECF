name: 2 - Compilation et Déploiement de l'Application Hello World (Java WAR)

# -----------------------------------------------------------------------
# Ce workflow gère la compilation et le déploiement de l'application Hello World Java.
# Il compile le code Java avec Maven, télécharge le WAR sur S3, puis le déploie
# sur l'instance EC2 exécutant Tomcat via SSH.
# -----------------------------------------------------------------------

on:
  workflow_dispatch:
    inputs:
      ec2_public_ip:
        description: 'IP publique EC2 (optionnel)'
        required: false
        type: string
      s3_bucket_name:
        description: 'Nom du bucket S3 (optionnel)'
        required: false
        type: string
      environment:
        description: 'Environnement de déploiement'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev      # Environnement de développement
          - pre-prod # Environnement de pré-production
          - prod     # Environnement de production

# Variables d'environnement globales
env:
  JAVA_VERSION: '17'         # Version de Java à utiliser
  JAVA_DISTRIBUTION: 'temurin' # Distribution Java (Adoptium Temurin)
  AWS_REGION: eu-west-3      # Région AWS (Paris)
  APP_DIR: app-java          # Répertoire de l'application Java (sans ./ pour éviter les problèmes de chemin)
  WAR_NAME: hello-world.war  # Nom du fichier WAR (sera modifié pour inclure l'environnement)

jobs:
  build-and-deploy:
    name: Compilation du WAR et Déploiement sur EC2 Tomcat
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Récupère tout l'historique pour les tags

      # Étape 2: Configuration de Java
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      # Étape 3: Mise en cache des dépendances Maven
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Étape 4: Compilation avec Maven
      - name: Build with Maven
        run: |
          echo "group=Maven Build" >> $GITHUB_STEP_SUMMARY
          if [ ! -d "${{ env.APP_DIR }}" ]; then
            echo "ERREUR: Le répertoire ${{ env.APP_DIR }} n'existe pas!"
            ls -la
            exit 1
          fi
          if [ ! -f "${{ env.APP_DIR }}/pom.xml" ]; then
            echo "ERREUR: Le fichier pom.xml n'existe pas dans ${{ env.APP_DIR }}!"
            ls -la ${{ env.APP_DIR }}
            exit 1
          fi
          cd ${{ env.APP_DIR }} && mvn -B clean package --file pom.xml
          echo "Vérification des dépendances Actuator et Micrometer..."
          if ! unzip -l target/hello-world.war | grep -q "BOOT-INF/lib/spring-boot-actuator-autoconfigure-[^/]*\.jar"; then
            echo "ERREUR: Le JAR spring-boot-actuator-autoconfigure (inclus par spring-boot-starter-actuator) n'est pas présent dans le WAR."
            echo "Contenu de BOOT-INF/lib/ pour débogage:"
            unzip -l target/hello-world.war | grep "BOOT-INF/lib/"
            exit 1
          fi
          if ! unzip -l target/hello-world.war | grep -q "BOOT-INF/lib/micrometer-registry-prometheus-[^/]*\.jar"; then
            echo "ERREUR: Le JAR micrometer-registry-prometheus n'est pas présent dans le WAR."
            echo "Contenu de BOOT-INF/lib/ pour débogage:"
            unzip -l target/hello-world.war | grep "BOOT-INF/lib/"
            exit 1
          fi
          echo "Les dépendances Actuator et Micrometer ont été vérifiées avec succès dans le WAR."
          echo "Contenu du WAR (JARs Actuator et Micrometer):"
          unzip -l target/hello-world.war | grep -i "BOOT-INF/lib/.*actuator"
          unzip -l target/hello-world.war | grep -i "BOOT-INF/lib/.*micrometer"
          echo "endgroup" >> $GITHUB_STEP_SUMMARY

      # Étape 5: Configuration des identifiants AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Étape 3.1: Définir les variables d'environnement à partir des secrets ou des inputs (correction du nom de l'étape)
      - name: Set Deployment Variables
        run: |
          echo "EC2_IP=${{ secrets.TF_EC2_PUBLIC_IP || github.event.inputs.ec2_public_ip }}" >> $GITHUB_ENV
          echo "S3_BUCKET=${{ secrets.TF_S3_BUCKET_NAME || github.event.inputs.s3_bucket_name }}" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=${{ secrets.TF_RDS_ENDPOINT || '' }}" >> $GITHUB_ENV
          WAR_BASE_NAME=$(echo "${{ env.WAR_NAME }}" | sed 's/\.war$//')
          echo "DEPLOY_WAR_NAME=${WAR_BASE_NAME}-${{ github.event.inputs.environment }}.war" >> $GITHUB_ENV
          echo "Nom du WAR pour le déploiement: ${WAR_BASE_NAME}-${{ github.event.inputs.environment }}.war"

      # Étape 6: Téléchargement du WAR sur S3
      - name: Upload WAR to S3
        run: |
          echo "group=Upload to S3" >> $GITHUB_STEP_SUMMARY
          if [ ! -f "${{ env.APP_DIR }}/target/hello-world.war" ]; then
            echo "ERREUR: Le fichier WAR n'existe pas: ${{ env.APP_DIR }}/target/hello-world.war"
            ls -la ${{ env.APP_DIR }}/target/
            exit 1
          fi
          aws s3 cp ${{ env.APP_DIR }}/target/hello-world.war s3://${{ env.S3_BUCKET }}/builds/backend/${{ env.DEPLOY_WAR_NAME }}
          echo "WAR téléversé avec succès sur S3: s3://${{ env.S3_BUCKET }}/builds/backend/${{ env.DEPLOY_WAR_NAME }}"
          echo "endgroup" >> $GITHUB_STEP_SUMMARY

      # Étape 7: Configuration de SSH simplifiée
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts
          echo "Configuration SSH terminée."

      # Étape 9: Déploiement du WAR sur l'instance EC2
      - name: Deploy WAR from S3 to EC2 Tomcat
        run: |
          echo "group=Deploy to EC2" >> $GITHUB_STEP_SUMMARY
          echo "Déploiement du WAR sur l'instance EC2..."
          echo "Téléchargement du WAR depuis S3..."
          aws s3 cp s3://${{ env.S3_BUCKET }}/builds/backend/${{ env.DEPLOY_WAR_NAME }} /tmp/${{ env.DEPLOY_WAR_NAME }}
          echo "Copie du WAR vers l'instance EC2..."
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa /tmp/${{ env.DEPLOY_WAR_NAME }} ec2-user@${{ env.EC2_IP }}:/tmp/${{ env.DEPLOY_WAR_NAME }}
          echo "Déploiement du WAR avec le script deploy-war.sh..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ env.EC2_IP }} "sudo /opt/yourmedia/deploy-war.sh /tmp/${{ env.DEPLOY_WAR_NAME }}"
          echo "Déploiement terminé."
          echo "endgroup" >> $GITHUB_STEP_SUMMARY

      # Étape 10: Extraction du nom de l'application à partir du nom du WAR
      - name: Extract App Name
        run: |
          APP_NAME=$(echo "${{ env.DEPLOY_WAR_NAME }}" | sed 's/\.war$//')
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "Nom de l'application extrait: $APP_NAME"

      # Étape 11: Vérification de l'application déployée
      - name: Verify Deployment
        env: # Définir les variables d'environnement spécifiques à cette étape
          TARGET_EC2_IP: ${{ env.EC2_IP }}
          TARGET_APP_NAME: ${{ env.APP_NAME }}
          # Utiliser des patterns exacts pour grep, incluant le signe '='
          ACTUATOR_KEY_PATTERN: "management.endpoints.web.base-path=" 
          APP_PROPERTIES_FILE: "${{ env.APP_DIR }}/src/main/resources/application.properties"
        run: |
          echo "group=Vérification du déploiement" >> $GITHUB_STEP_SUMMARY
          echo "Attente de la disponibilité de l'application..."
          sleep 30

          echo "Vérification de l'application..."
          MAX_ATTEMPTS=10
          ATTEMPT=1
          SUCCESS=false

          # Lire management.endpoints.web.base-path depuis application.properties
          # grep pour le pattern exact au début de la ligne, puis cut pour la valeur
          # cut -f2- prend tout après le premier délimiteur (au cas où la valeur contiendrait '=')
          RAW_ACTUATOR_BASE_PATH=$(grep "^${ACTUATOR_KEY_PATTERN}" "${APP_PROPERTIES_FILE}" | cut -d'=' -f2-)
          if [ -z "$RAW_ACTUATOR_BASE_PATH" ]; then
            ACTUATOR_BASE_PATH="/actuator" # Valeur par défaut si non trouvée ou vide
            echo "WARN: '${ACTUATOR_KEY_PATTERN}' non trouvée ou vide dans ${APP_PROPERTIES_FILE}. Utilisation de la valeur par défaut: ${ACTUATOR_BASE_PATH}"
          else
            # Supprimer les espaces de début/fin de la valeur extraite
            ACTUATOR_BASE_PATH=$(echo "$RAW_ACTUATOR_BASE_PATH" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            echo "INFO: Valeur trouvée pour '${ACTUATOR_KEY_PATTERN}': ${ACTUATOR_BASE_PATH}"
          fi

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Tentative $ATTEMPT/$MAX_ATTEMPTS..."

            # L'URL de base de l'application. TARGET_APP_NAME est le nom du contexte sur Tomcat.
            APP_BASE_URL="http://${TARGET_EC2_IP}:8080/${TARGET_APP_NAME}"

            # Vérifier l'accès à la racine de l'application
            # / à la fin pour s'assurer qu'on teste le contexte de l'application (peut rediriger vers index.html)
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${APP_BASE_URL}/")
            
            # Accepter 200 (OK) ou 302 (Found - souvent une redirection vers index.html par WelcomePageHandlerMapping)
            if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "302" ]; then
              echo "✅ L'application est accessible (HTTP $HTTP_CODE) à ${APP_BASE_URL}/"
              
              # L'URL de l'Actuator est construite en ajoutant ACTUATOR_BASE_PATH au contexte de l'application
              # Ex: http://host:port/app-name/actuator
              ACTUATOR_URL="${APP_BASE_URL}${ACTUATOR_BASE_PATH}"
              echo "Vérification de l'endpoint Actuator à l'URL: ${ACTUATOR_URL}"
              ACTUATOR_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${ACTUATOR_URL}")
              
              if [ "$ACTUATOR_CODE" = "200" ]; then
                echo "✅ L'endpoint Actuator est accessible (HTTP 200) à ${ACTUATOR_URL}"
                SUCCESS=true
                break
              else
                echo "⚠️ L'endpoint Actuator n'est pas accessible (HTTP $ACTUATOR_CODE) à l'URL ${ACTUATOR_URL}"
              fi
            else
              echo "⚠️ L'application n'est pas accessible (HTTP $HTTP_CODE) à ${APP_BASE_URL}/"
            fi

            ATTEMPT=$((ATTEMPT+1))
            if [ $ATTEMPT -le $MAX_ATTEMPTS ]; then
              echo "Attente avant la prochaine tentative..."
              sleep 10
            fi
          done

          if [ "$SUCCESS" = "false" ]; then
            echo "❌ L'application ou l'endpoint Actuator n'est pas accessible après $MAX_ATTEMPTS tentatives"
            # Décommenter pour faire échouer le workflow si la vérification échoue
            # exit 1 
          fi
          echo "endgroup" >> $GITHUB_STEP_SUMMARY

      # Étape 12: Résumé du déploiement
      - name: Summary
        run: |
          echo "## Résumé du déploiement Backend" >> $GITHUB_STEP_SUMMARY
          echo "* **Application:** Backend Java (WAR)" >> $GITHUB_STEP_SUMMARY
          echo "* **Environnement:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Instance EC2:** ${{ env.EC2_IP }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Bucket S3:** ${{ env.S3_BUCKET }}" >> $GITHUB_STEP_SUMMARY
          
          # APP_NAME est le nom du contexte (ex: hello-world-dev)
          # L'application.properties a server.servlet.context-path=/hello-world-dev
          # Donc l'URL de base est http://ip:port/APP_NAME/
          # L'API Health (définie dans HomeController à @GetMapping("/api/health")) est relative à cela.
          APP_URL="http://${{ env.EC2_IP }}:8080/${{ env.APP_NAME }}/"
          HEALTH_API_URL="http://${{ env.EC2_IP }}:8080/${{ env.APP_NAME }}/api/health"
          
          echo "* **URL de l'application (index):** ${APP_URL}" >> $GITHUB_STEP_SUMMARY
          echo "* **URL de l'API Health:** ${HEALTH_API_URL}" >> $GITHUB_STEP_SUMMARY
          echo "* **Statut:** Déployé avec succès (vérification Actuator: $SUCCESS) ✅" >> $GITHUB_STEP_SUMMARY
