name: 2 - Build and Deploy Backend (Java WAR)

# -----------------------------------------------------------------------
# Ce workflow gère la compilation et le déploiement de l'application backend Java.
# Il compile le code Java avec Maven, télécharge le WAR sur S3, puis le déploie
# sur l'instance EC2 exécutant Tomcat via SSH.
# -----------------------------------------------------------------------

on:
  workflow_dispatch:
    inputs:
      manual_override:
        description: 'Utiliser les valeurs manuelles au lieu des secrets GitHub'
        required: false
        default: false
        type: boolean
      ec2_public_ip:
        description: 'Adresse IP publique de l''instance EC2 (uniquement si override manuel)'
        required: false
        type: string
      s3_bucket_name:
        description: 'Nom du bucket S3 (uniquement si override manuel)'
        required: false
        type: string

# Variables d'environnement globales
env:
  JAVA_VERSION: '17'         # Version de Java à utiliser
  JAVA_DISTRIBUTION: 'temurin' # Distribution Java (Adoptium Temurin)
  AWS_REGION: eu-west-3      # Région AWS (Paris)
  APP_DIR: ./app-java        # Répertoire de l'application Java
  WAR_NAME: yourmedia-backend.war # Nom du fichier WAR

jobs:
  build-and-deploy:
    name: Build WAR and Deploy to EC2 Tomcat
    runs-on: ubuntu-latest

    steps:
      # Étape 0: Récupération des paramètres depuis GitHub Secrets ou inputs manuels
      - name: Set parameters from GitHub Secrets
        if: ${{ !inputs.manual_override }}
        run: |
          echo "Using parameters from GitHub Secrets..."
          echo "EC2_PUBLIC_IP=${{ secrets.TF_EC2_PUBLIC_IP }}" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=${{ secrets.TF_S3_BUCKET_NAME }}" >> $GITHUB_ENV

          echo "Retrieved EC2 Public IP: ${{ secrets.TF_EC2_PUBLIC_IP }}"
          echo "Retrieved S3 Bucket Name: ${{ secrets.TF_S3_BUCKET_NAME }}"

      - name: Set manual parameters
        if: ${{ inputs.manual_override }}
        run: |
          echo "Using manually provided parameters..."
          echo "EC2_PUBLIC_IP=${{ inputs.ec2_public_ip }}" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=${{ inputs.s3_bucket_name }}" >> $GITHUB_ENV

      # Étape 1: Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Récupère tout l'historique pour les tags

      # Étape 2: Configuration de Java
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      # Étape 3: Mise en cache des dépendances Maven
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Étape 4: Compilation avec Maven
      - name: Build with Maven
        run: |
          echo "::group::Maven Build"
          mvn -B package --file pom.xml # -B pour le mode batch non interactif
          echo "::endgroup::"
        working-directory: ${{ env.APP_DIR }}

      # Étape 5: Configuration des identifiants AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Étape 6: Téléchargement du WAR sur S3
      - name: Upload WAR to S3
        run: |
          echo "::group::Upload to S3"
          aws s3 cp target/${{ env.WAR_NAME }} s3://${{ env.S3_BUCKET_NAME }}/builds/backend/${{ env.WAR_NAME }}
          echo "WAR téléversé avec succès sur S3: s3://${{ env.S3_BUCKET_NAME }}/builds/backend/${{ env.WAR_NAME }}"
          echo "::endgroup::"
        working-directory: ${{ env.APP_DIR }}

      # Étape 7: Vérification et configuration de SSH
      - name: Check SSH key
        id: check-ssh-key
        run: |
          if [ -z "${{ secrets.EC2_SSH_PRIVATE_KEY }}" ]; then
            echo "::error::Le secret EC2_SSH_PRIVATE_KEY n'est pas configuré. Veuillez le configurer dans les paramètres du dépôt GitHub."
            echo "::error::Pour plus d'informations, consultez le fichier SSH-CONFIGURATION-GUIDE.md."
            exit 1
          else
            echo "La clé SSH est configurée."

            # Vérification du format de la clé SSH (doit commencer par -----BEGIN et se terminer par -----END)
            if [[ "${{ secrets.EC2_SSH_PRIVATE_KEY }}" != *"-----BEGIN"* ]] || [[ "${{ secrets.EC2_SSH_PRIVATE_KEY }}" != *"-----END"* ]]; then
              echo "::error::Le format de la clé SSH semble incorrect. Assurez-vous que la clé commence par -----BEGIN et se termine par -----END."
              echo "::error::Pour plus d'informations, consultez le fichier SSH-CONFIGURATION-GUIDE.md."
              exit 1
            fi
          fi

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          log-public-key: true

      # Étape 8: Déploiement du WAR sur l'instance EC2
      - name: Deploy WAR from S3 to EC2 Tomcat
        run: |
          echo "::group::Deploy to EC2"
          # Affichage des informations de débogage
          echo "Débogage SSH:"
          echo "- Utilisateur SSH: ec2-user"
          echo "- Adresse IP EC2: ${{ env.EC2_PUBLIC_IP }}"
          echo "- Répertoire SSH: $HOME/.ssh"
          ls -la $HOME/.ssh

          # Vérification de la clé SSH
          echo "Vérification de la clé SSH:"
          ssh-add -l

          # Ajout de la clé d'hôte EC2 aux known_hosts pour éviter les prompts
          echo "Ajout de la clé d'hôte EC2 aux known_hosts:"
          ssh-keyscan -v -H ${{ env.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

          # Test de connexion SSH simple
          echo "Test de connexion SSH simple:"
          ssh -v -o StrictHostKeyChecking=no ec2-user@${{ env.EC2_PUBLIC_IP }} "echo 'Connexion SSH réussie'"

          # Connexion SSH à l'EC2 et utilisation d'AWS CLI pour copier depuis S3 vers Tomcat webapps
          echo "Connexion SSH pour déploiement:"
          ssh -v ec2-user@${{ env.EC2_PUBLIC_IP }} << EOF
            echo "--- Installation d'AWS CLI (si nécessaire) ---"
            if ! command -v aws &> /dev/null
            then
                sudo yum update -y
                sudo yum install -y aws-cli
            fi
            echo "--- Copie du WAR depuis S3 vers Tomcat ---"
            sudo aws s3 cp s3://${{ env.S3_BUCKET_NAME }}/builds/backend/${{ env.WAR_NAME }} /opt/tomcat/webapps/${{ env.WAR_NAME }}
            echo "--- Déploiement terminé, Tomcat va automatiquement déployer le WAR ---"
          EOF
          echo "::endgroup::"

      # Étape 9: Résumé du déploiement
      - name: Summary
        run: |
          echo "## Résumé du déploiement Backend" >> $GITHUB_STEP_SUMMARY
          echo "* **Application:** Backend Java (WAR)" >> $GITHUB_STEP_SUMMARY
          echo "* **Instance EC2:** ${{ env.EC2_PUBLIC_IP }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Bucket S3:** ${{ env.S3_BUCKET_NAME }}" >> $GITHUB_STEP_SUMMARY
          # Extraction du nom de l'application sans l'extension .war
          WAR_NAME_WITHOUT_EXTENSION=$(echo "${{ env.WAR_NAME }}" | sed 's/\.war$//')
          echo "* **URL de l'application:** http://${{ env.EC2_PUBLIC_IP }}:8080/${WAR_NAME_WITHOUT_EXTENSION}/" >> $GITHUB_STEP_SUMMARY
          echo "* **Statut:** Déployé avec succès ✅" >> $GITHUB_STEP_SUMMARY
