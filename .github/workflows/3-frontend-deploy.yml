name: 3 - Build Frontend (React Native Web CI)

# -----------------------------------------------------------------------
# Ce workflow gère la vérification de l'application frontend React Native Web.
# Il s'exécute automatiquement à chaque push sur la branche main qui modifie
# le code frontend, ou peut être déclenché manuellement.
# Note: Le déploiement réel est géré par AWS Amplify via la connexion au repo.
# -----------------------------------------------------------------------

on:
  workflow_dispatch: # Permet le déclenchement manuel
  push:
    branches: [ main ] # Déclenche sur push vers la branche main (pour vérification CI)
    paths:
      - 'app-react/**' # S'exécute uniquement si le code frontend change

# Variables d'environnement globales
env:
  NODE_VERSION: '18'     # Version de Node.js à utiliser
  APP_DIR: ./app-react   # Répertoire de l'application React

jobs:
  build:
    name: Build React Native Web App
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Récupère tout l'historique pour les tags

      # Étape 2: Détection du gestionnaire de paquets
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ env.APP_DIR }}/yarn.lock" ]; then
            echo "PACKAGE_MANAGER=yarn" >> $GITHUB_ENV
            echo "LOCK_FILE=yarn.lock" >> $GITHUB_ENV
          else
            echo "PACKAGE_MANAGER=npm" >> $GITHUB_ENV
            echo "LOCK_FILE=package-lock.json" >> $GITHUB_ENV
          fi
          echo "Using ${{ env.PACKAGE_MANAGER }} as package manager"

      # Étape 3: Configuration de Node.js
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ${{ env.PACKAGE_MANAGER }}
          cache-dependency-path: ${{ env.APP_DIR }}/${{ env.LOCK_FILE }}

      # Étape 4: Installation des dépendances
      - name: Install dependencies
        run: |
          echo "::group::Installing dependencies"
          ${{ env.PACKAGE_MANAGER }} install
          echo "::endgroup::"
        working-directory: ${{ env.APP_DIR }}

      # Étape 5: Installation d'Expo CLI et compilation de l'application web
      - name: Install Expo CLI and build web application
        run: |
          echo "::group::Installing Expo CLI"
          npm install -g expo-cli
          echo "::endgroup::"

          echo "::group::Building web application"
          # Utiliser directement expo export pour éviter les problèmes avec les plugins natifs
          npx expo export --platform web
          echo "::endgroup::"
        working-directory: ${{ env.APP_DIR }}

      # Étape 6 (optionnelle): Linting et tests
      # - name: Run linter and tests
      #   run: |
      #     echo "::group::Linting and testing"
      #     ${{ env.PACKAGE_MANAGER }} run lint
      #     ${{ env.PACKAGE_MANAGER }} test
      #     echo "::endgroup::"
      #   working-directory: ${{ env.APP_DIR }}

      # Étape 6: Résumé de la compilation
      - name: Summary
        run: |
          echo "## Résumé de la compilation Frontend" >> $GITHUB_STEP_SUMMARY
          echo "* **Application:** Frontend React Native Web" >> $GITHUB_STEP_SUMMARY
          echo "* **Branche:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Déclencheur:** ${{ github.event_name == 'workflow_dispatch' && 'Manuel' || 'Push' }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Statut:** Compilation réussie ✅" >> $GITHUB_STEP_SUMMARY
          echo "* **Note:** Le déploiement est géré automatiquement par AWS Amplify" >> $GITHUB_STEP_SUMMARY
