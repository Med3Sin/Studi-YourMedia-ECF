name: 1 - Deploy/Destroy Infrastructure (Terraform)

# -----------------------------------------------------------------------
# Ce workflow gère le déploiement et la destruction de l'infrastructure AWS via Terraform.
# Il utilise le secret GH_PAT au lieu de GITHUB_TOKEN car les noms de secrets personnalisés
# ne doivent pas commencer par GITHUB_ (préfixe réservé aux variables d'environnement GitHub).
# La syntaxe ${{ secrets.GH_PAT || '' }} permet d'utiliser une chaîne vide si le secret
# n'est pas défini, évitant ainsi le blocage du workflow.
# -----------------------------------------------------------------------

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action Terraform à exécuter'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan     # Prévisualiser les changements sans les appliquer
          - apply    # Appliquer les changements à l'infrastructure
          - destroy  # Détruire l'infrastructure existante
      environment:
        description: 'Environnement de déploiement'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev      # Environnement de développement
          - pre-prod # Environnement de pré-production
          - prod     # Environnement de production



# Variables d'environnement globales
env:
  TF_WORKING_DIR: ./infrastructure  # Répertoire contenant les fichiers Terraform
  AWS_REGION: eu-west-3            # Région AWS (Paris)

jobs:
  terraform:
    name: 'Terraform ${{ github.event.inputs.action }}'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      # Étape 1: Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main  # Utilise explicitement la branche main
          fetch-depth: 0  # Récupère tout l'historique pour les tags

      # Étape 2: Configuration de Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ">=1.0"  # Version compatible avec le code
          terraform_wrapper: false    # Désactive le wrapper pour une meilleure gestion des erreurs

      # Étape 3: Configuration des identifiants AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Étape 4: Initialisation de Terraform
      - name: Terraform Init
        id: init
        run: terraform init

      # Étape 5: Validation de la configuration Terraform
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # Étape 6: Formatage du code Terraform (vérification uniquement)
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true  # Ne bloque pas le workflow si le formatage n'est pas correct

      # Étape 7: Planification des changements Terraform
      - name: Terraform Plan
        id: plan
        if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
        run: |
          echo "::group::Terraform Plan"
          terraform plan \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="ec2_key_pair_name=${{ secrets.EC2_KEY_PAIR_NAME }}" \
            -var="github_token=${{ secrets.GH_PAT || '' }}" \
            -var="repo_owner=${{ github.repository_owner }}" \
            -var="repo_name=${{ github.repository }}" \
            -var="ssh_private_key_path=~/.ssh/id_rsa" \
            -var="environment=${{ github.event.inputs.environment }}" \
            -no-color \
            -out=tfplan
          echo "::endgroup::"
        continue-on-error: false  # Arrête le workflow si le plan échoue

      # Étape 8: Application des changements Terraform
      - name: Terraform Apply
        id: apply
        if: github.event.inputs.action == 'apply'
        run: |
          echo "::group::Terraform Apply"
          terraform apply -auto-approve tfplan
          echo "::endgroup::"

          # Affiche les outputs après l'application
          echo "\n\n--- Outputs de l'infrastructure ---"
          terraform output

          # Stockage des outputs dans les secrets GitHub
          echo "::group::Stockage des outputs dans les secrets GitHub"
          # Récupération des outputs importants
          EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)
          S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name)
          MONITORING_EC2_PUBLIC_IP=$(terraform output -raw monitoring_ec2_public_ip)
          RDS_ENDPOINT=$(terraform output -raw rds_endpoint 2>/dev/null || echo "")
          GRAFANA_URL=$(terraform output -raw grafana_url 2>/dev/null || echo "")
          AMPLIFY_APP_URL=$(terraform output -raw amplify_app_url 2>/dev/null || echo "")

          # Stockage dans les secrets GitHub
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=$S3_BUCKET_NAME" >> $GITHUB_ENV
          echo "MONITORING_EC2_PUBLIC_IP=$MONITORING_EC2_PUBLIC_IP" >> $GITHUB_ENV

          # Stockage des outputs additionnels s'ils existent
          if [ ! -z "$RDS_ENDPOINT" ]; then
            echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV
          fi

          if [ ! -z "$GRAFANA_URL" ]; then
            echo "GRAFANA_URL=$GRAFANA_URL" >> $GITHUB_ENV
          fi

          if [ ! -z "$AMPLIFY_APP_URL" ]; then
            echo "AMPLIFY_APP_URL=$AMPLIFY_APP_URL" >> $GITHUB_ENV
          fi

          echo "::endgroup::"
        continue-on-error: false  # Arrête le workflow si l'application échoue

      # Étape 9: Destruction de l'infrastructure Terraform
      - name: Terraform Destroy
        id: destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          echo "::group::Terraform Destroy"
          terraform destroy -auto-approve \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="ec2_key_pair_name=${{ secrets.EC2_KEY_PAIR_NAME }}" \
            -var="github_token=${{ secrets.GH_PAT || '' }}" \
            -var="repo_owner=${{ github.repository_owner }}" \
            -var="repo_name=${{ github.repository }}" \
            -var="ssh_private_key_path=~/.ssh/id_rsa" \
            -var="environment=${{ github.event.inputs.environment }}"
          echo "::endgroup::"
        continue-on-error: false  # Arrête le workflow si la destruction échoue

      # Étape 10: Création des secrets GitHub à partir des outputs Terraform
      - name: Create EC2 Public IP Secret
        if: github.event.inputs.action == 'apply' && env.EC2_PUBLIC_IP != ''
        uses: gliech/create-github-secret-action@v1
        with:
          name: TF_EC2_PUBLIC_IP
          value: ${{ env.EC2_PUBLIC_IP }}
          pa_token: ${{ secrets.GH_PAT }}

      - name: Create S3 Bucket Secret
        if: github.event.inputs.action == 'apply' && env.S3_BUCKET_NAME != ''
        uses: gliech/create-github-secret-action@v1
        with:
          name: TF_S3_BUCKET_NAME
          value: ${{ env.S3_BUCKET_NAME }}
          pa_token: ${{ secrets.GH_PAT }}

      - name: Create Monitoring EC2 Secret
        if: github.event.inputs.action == 'apply' && env.MONITORING_EC2_PUBLIC_IP != ''
        uses: gliech/create-github-secret-action@v1
        with:
          name: TF_MONITORING_EC2_PUBLIC_IP
          value: ${{ env.MONITORING_EC2_PUBLIC_IP }}
          pa_token: ${{ secrets.GH_PAT }}

      - name: Create RDS Endpoint Secret
        if: github.event.inputs.action == 'apply' && env.RDS_ENDPOINT != ''
        uses: gliech/create-github-secret-action@v1
        with:
          name: TF_RDS_ENDPOINT
          value: ${{ env.RDS_ENDPOINT }}
          pa_token: ${{ secrets.GH_PAT }}

      - name: Create Grafana URL Secret
        if: github.event.inputs.action == 'apply' && env.GRAFANA_URL != ''
        uses: gliech/create-github-secret-action@v1
        with:
          name: TF_GRAFANA_URL
          value: ${{ env.GRAFANA_URL }}
          pa_token: ${{ secrets.GH_PAT }}

      - name: Create Amplify App URL Secret
        if: github.event.inputs.action == 'apply' && env.AMPLIFY_APP_URL != ''
        uses: gliech/create-github-secret-action@v1
        with:
          name: TF_AMPLIFY_APP_URL
          value: ${{ env.AMPLIFY_APP_URL }}
          pa_token: ${{ secrets.GH_PAT }}

      # Étape 11: Résumé de l'exécution
      - name: Summary
        run: |
          echo "## Résumé de l'exécution Terraform" >> $GITHUB_STEP_SUMMARY
          echo "* **Action exécutée:** ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event.inputs.action }}" == "apply" ]]; then
            echo "* **Outputs stockés dans les secrets GitHub:**" >> $GITHUB_STEP_SUMMARY
            if [ ! -z "$EC2_PUBLIC_IP" ]; then echo "  - TF_EC2_PUBLIC_IP" >> $GITHUB_STEP_SUMMARY; fi
            if [ ! -z "$S3_BUCKET_NAME" ]; then echo "  - TF_S3_BUCKET_NAME" >> $GITHUB_STEP_SUMMARY; fi
            if [ ! -z "$MONITORING_EC2_PUBLIC_IP" ]; then echo "  - TF_MONITORING_EC2_PUBLIC_IP" >> $GITHUB_STEP_SUMMARY; fi
            if [ ! -z "$RDS_ENDPOINT" ]; then echo "  - TF_RDS_ENDPOINT" >> $GITHUB_STEP_SUMMARY; fi
            if [ ! -z "$GRAFANA_URL" ]; then echo "  - TF_GRAFANA_URL" >> $GITHUB_STEP_SUMMARY; fi
            if [ ! -z "$AMPLIFY_APP_URL" ]; then echo "  - TF_AMPLIFY_APP_URL" >> $GITHUB_STEP_SUMMARY; fi
          fi
          echo "* **Branche:** main" >> $GITHUB_STEP_SUMMARY
          echo "* **Région AWS:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Statut:** Succès ✅" >> $GITHUB_STEP_SUMMARY
