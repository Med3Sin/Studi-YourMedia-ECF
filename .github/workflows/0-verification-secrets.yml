name: 0 - Vérification des Secrets GitHub

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Mode de vérification'
        required: true
        default: 'verification'
        type: choice
        options:
          - verification
          - rapport

  # Exécuter automatiquement avant certains workflows critiques
  workflow_call:
    outputs:
      status:
        description: "Statut de la vérification des secrets"
        value: ${{ jobs.check-secrets.outputs.status }}

jobs:
  check-secrets:
    name: Vérifier les Secrets GitHub
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check.outputs.status }}

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configurer les permissions du script
        run: chmod +x ./scripts/utils/check-github-secrets.sh

      - name: Vérifier les secrets GitHub
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          CHECK_MODE: ${{ github.event.inputs.mode || 'verification' }}
        run: |
          echo "::group::Vérification des secrets GitHub"

          if [ "$CHECK_MODE" = "rapport" ]; then
            # Mode rapport - afficher les secrets manquants mais ne pas échouer
            ./scripts/utils/check-github-secrets.sh || true
            echo "status=warning" >> $GITHUB_OUTPUT
          else
            # Mode vérification - échouer si des secrets sont manquants
            if ./scripts/utils/check-github-secrets.sh; then
              echo "status=success" >> $GITHUB_OUTPUT
            else
              echo "status=failure" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

          echo "::endgroup::"

      - name: Résumé de la vérification
        run: |
          echo "## Résultat de la vérification des secrets GitHub" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check.outputs.status }}" = "success" ]; then
            echo "✅ **Tous les secrets requis sont configurés**" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.check.outputs.status }}" = "warning" ]; then
            echo "⚠️ **Certains secrets sont manquants (mode rapport)**" >> $GITHUB_STEP_SUMMARY
            echo "Consultez les logs pour plus de détails." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Des secrets requis sont manquants**" >> $GITHUB_STEP_SUMMARY
            echo "Consultez les logs pour plus de détails." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Pour configurer les secrets manquants, suivez les instructions dans le document [Configuration des Secrets GitHub](../docs/GITHUB-SECRETS-CONFIGURATION.md)" >> $GITHUB_STEP_SUMMARY

  generate-report:
    name: Générer un rapport détaillé
    runs-on: ubuntu-latest
    needs: check-secrets
    if: github.event.inputs.mode == 'rapport'

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Installer jq
        run: sudo apt-get install -y jq

      - name: Générer un rapport détaillé
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "## Rapport détaillé des secrets GitHub" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Récupérer la liste des secrets configurés
          SECRETS_RESPONSE=$(curl -s -X GET \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/secrets")

          # Vérifier si la réponse est valide
          if [[ "$SECRETS_RESPONSE" == *"message"* && "$SECRETS_RESPONSE" == *"Not Found"* ]]; then
            echo "❌ **Impossible de récupérer les secrets. Vérifiez le token GitHub et le nom du dépôt.**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Extraire le nombre total de secrets
          TOTAL_SECRETS=$(echo "$SECRETS_RESPONSE" | jq '.total_count')
          echo "### Nombre total de secrets configurés: $TOTAL_SECRETS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Liste des secrets requis
          echo "### Secrets requis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Secret | Statut | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|-------------|" >> $GITHUB_STEP_SUMMARY

          # Définir les secrets requis et leurs descriptions
          declare -A REQUIRED_SECRETS
          REQUIRED_SECRETS["AWS_ACCESS_KEY_ID"]="Clé d'accès AWS"
          REQUIRED_SECRETS["AWS_SECRET_ACCESS_KEY"]="Clé secrète AWS"
          REQUIRED_SECRETS["RDS_USERNAME"]="Nom d'utilisateur RDS"
          REQUIRED_SECRETS["RDS_PASSWORD"]="Mot de passe RDS"
          REQUIRED_SECRETS["EC2_SSH_PRIVATE_KEY"]="Clé SSH privée pour EC2"
          REQUIRED_SECRETS["EC2_SSH_PUBLIC_KEY"]="Clé SSH publique pour EC2"
          REQUIRED_SECRETS["EC2_KEY_PAIR_NAME"]="Nom de la paire de clés EC2"
          REQUIRED_SECRETS["DOCKERHUB_USERNAME"]="Nom d'utilisateur Docker Hub"
          REQUIRED_SECRETS["DOCKERHUB_TOKEN"]="Token Docker Hub"
          REQUIRED_SECRETS["DOCKERHUB_REPO"]="Nom du dépôt Docker Hub"
          REQUIRED_SECRETS["GF_SECURITY_ADMIN_PASSWORD"]="Mot de passe admin Grafana"
          REQUIRED_SECRETS["TF_API_TOKEN"]="Token API Terraform Cloud"
          REQUIRED_SECRETS["TF_WORKSPACE_ID"]="ID du workspace Terraform Cloud"
          REQUIRED_SECRETS["GH_PAT"]="Token d'accès personnel GitHub pour télécharger les scripts"

          # Extraire les noms des secrets configurés
          CONFIGURED_SECRETS=$(echo "$SECRETS_RESPONSE" | jq -r '.secrets[].name')

          # Vérifier chaque secret requis
          for SECRET in "${!REQUIRED_SECRETS[@]}"; do
            DESCRIPTION="${REQUIRED_SECRETS[$SECRET]}"
            if echo "$CONFIGURED_SECRETS" | grep -q "^$SECRET$"; then
              echo "| \`$SECRET\` | ✅ Configuré | $DESCRIPTION |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| \`$SECRET\` | ❌ Manquant | $DESCRIPTION |" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Secrets de compatibilité" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Secret ancien | Secret standard | Statut |" >> $GITHUB_STEP_SUMMARY
          echo "|--------------|-----------------|--------|" >> $GITHUB_STEP_SUMMARY

          # Définir les paires de compatibilité
          declare -A COMPAT_SECRETS
          COMPAT_SECRETS["DOCKER_USERNAME"]="DOCKERHUB_USERNAME"
          COMPAT_SECRETS["DOCKER_PASSWORD"]="DOCKERHUB_TOKEN"
          COMPAT_SECRETS["DOCKER_REPO"]="DOCKERHUB_REPO"
          COMPAT_SECRETS["DB_USERNAME"]="RDS_USERNAME"
          COMPAT_SECRETS["DB_PASSWORD"]="RDS_PASSWORD"
          COMPAT_SECRETS["GRAFANA_ADMIN_PASSWORD"]="GF_SECURITY_ADMIN_PASSWORD"

          # Vérifier chaque paire de compatibilité
          for OLD_SECRET in "${!COMPAT_SECRETS[@]}"; do
            NEW_SECRET="${COMPAT_SECRETS[$OLD_SECRET]}"

            OLD_CONFIGURED=$(echo "$CONFIGURED_SECRETS" | grep -q "^$OLD_SECRET$" && echo "true" || echo "false")
            NEW_CONFIGURED=$(echo "$CONFIGURED_SECRETS" | grep -q "^$NEW_SECRET$" && echo "true" || echo "false")

            if [ "$OLD_CONFIGURED" = "true" ] && [ "$NEW_CONFIGURED" = "true" ]; then
              echo "| \`$OLD_SECRET\` | \`$NEW_SECRET\` | ✅ Les deux sont configurés |" >> $GITHUB_STEP_SUMMARY
            elif [ "$OLD_CONFIGURED" = "true" ] && [ "$NEW_CONFIGURED" = "false" ]; then
              echo "| \`$OLD_SECRET\` | \`$NEW_SECRET\` | ⚠️ Ancien configuré, standard manquant |" >> $GITHUB_STEP_SUMMARY
            elif [ "$OLD_CONFIGURED" = "false" ] && [ "$NEW_CONFIGURED" = "true" ]; then
              echo "| \`$OLD_SECRET\` | \`$NEW_SECRET\` | ✅ Standard configuré uniquement |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| \`$OLD_SECRET\` | \`$NEW_SECRET\` | ❌ Les deux sont manquants |" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Pour configurer les secrets manquants, suivez les instructions dans le document [Configuration des Secrets GitHub](../docs/GITHUB-SECRETS-CONFIGURATION.md)" >> $GITHUB_STEP_SUMMARY
