name: 3 - Docker Build and Deploy

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target to build and deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - mobile
          - monitoring
      deploy:
        description: 'Deploy after build'
        required: true
        default: true
        type: boolean

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set version
        id: version
        run: |
          VERSION=$(date +%Y%m%d%H%M%S)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version: $VERSION"

      # Build and push mobile app image
      - name: Build and push mobile app image
        if: ${{ github.event.inputs.target == 'all' || github.event.inputs.target == 'mobile' }}
        uses: docker/build-push-action@v5
        with:
          context: ./app-react
          file: ./app-react/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:mobile-${{ env.VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:mobile-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push Grafana image
      - name: Build and push Grafana image
        if: ${{ github.event.inputs.target == 'all' || github.event.inputs.target == 'monitoring' }}
        uses: docker/build-push-action@v5
        with:
          context: ./scripts/docker/grafana
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:grafana-${{ env.VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:grafana-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push Prometheus image
      - name: Build and push Prometheus image
        if: ${{ github.event.inputs.target == 'all' || github.event.inputs.target == 'monitoring' }}
        uses: docker/build-push-action@v5
        with:
          context: ./scripts/docker/prometheus
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:prometheus-${{ env.VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:prometheus-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push SonarQube image
      - name: Build and push SonarQube image
        if: ${{ github.event.inputs.target == 'all' || github.event.inputs.target == 'monitoring' }}
        uses: docker/build-push-action@v5
        with:
          context: ./scripts/docker/sonarqube
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:sonarqube-${{ env.VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:sonarqube-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Install Trivy scanner for security scanning
      - name: Install Trivy scanner
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.45.1
          trivy --version

      # Test Docker images for vulnerabilities
      - name: Test Docker images with Trivy
        run: |
          echo "Scanning Docker images for vulnerabilities..."

          if [[ "${{ github.event.inputs.target }}" == "all" || "${{ github.event.inputs.target }}" == "mobile" ]]; then
            echo "Scanning mobile app image..."
            trivy image --exit-code 0 --severity HIGH,CRITICAL --ignore-unfixed ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:mobile-${{ env.VERSION }} > mobile-scan.txt
          fi

          if [[ "${{ github.event.inputs.target }}" == "all" || "${{ github.event.inputs.target }}" == "monitoring" ]]; then
            echo "Scanning Grafana image..."
            trivy image --exit-code 0 --severity HIGH,CRITICAL --ignore-unfixed ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:grafana-${{ env.VERSION }} > grafana-scan.txt

            echo "Scanning Prometheus image..."
            trivy image --exit-code 0 --severity HIGH,CRITICAL --ignore-unfixed ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:prometheus-${{ env.VERSION }} > prometheus-scan.txt

            echo "Scanning SonarQube image..."
            trivy image --exit-code 0 --severity HIGH,CRITICAL --ignore-unfixed ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:sonarqube-${{ env.VERSION }} > sonarqube-scan.txt
          fi

      # Test Docker image health checks
      - name: Test Docker image health checks
        run: |
          # Test de santé pour l'application mobile
          if [[ "${{ github.event.inputs.target }}" == "all" || "${{ github.event.inputs.target }}" == "mobile" ]]; then
            echo "Testing mobile app health check..."
            docker run -d --name mobile-test -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:mobile-${{ env.VERSION }}
            sleep 10
            curl -f http://localhost:3000/ || (echo "::warning::Le health check de l'image mobile a échoué" && docker logs mobile-test)
            docker stop mobile-test
            docker rm mobile-test
          fi

          # Test de santé pour Grafana
          if [[ "${{ github.event.inputs.target }}" == "all" || "${{ github.event.inputs.target }}" == "monitoring" ]]; then
            echo "Testing Grafana health check..."
            docker run -d --name grafana-test -p 3001:3000 ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:grafana-${{ env.VERSION }}
            sleep 10
            curl -f http://localhost:3001/api/health || (echo "::warning::Le health check de l'image Grafana a échoué" && docker logs grafana-test)
            docker stop grafana-test
            docker rm grafana-test

            # Test de santé pour Prometheus
            echo "Testing Prometheus health check..."
            docker run -d --name prometheus-test -p 9090:9090 ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:prometheus-${{ env.VERSION }}
            sleep 10
            curl -f http://localhost:9090/-/healthy || (echo "::warning::Le health check de l'image Prometheus a échoué" && docker logs prometheus-test)
            docker stop prometheus-test
            docker rm prometheus-test
          fi

      - name: Summary
        run: |
          echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "* **Version:** ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Target:** ${{ github.event.inputs.target }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Deploy:** ${{ github.event.inputs.deploy }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Docker Hub Repository:** https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event.inputs.target }}" == "all" || "${{ github.event.inputs.target }}" == "mobile" ]]; then
            echo "* **Mobile App Image:** ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:mobile-${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
            echo "* **Mobile App Scan Results:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat mobile-scan.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ github.event.inputs.target }}" == "all" || "${{ github.event.inputs.target }}" == "monitoring" ]]; then
            echo "* **Grafana Image:** ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:grafana-${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
            echo "* **Prometheus Image:** ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:prometheus-${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
            echo "* **SonarQube Image:** ${{ secrets.DOCKER_USERNAME }}/yourmedia-ecf:sonarqube-${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY

            echo "* **Monitoring Images Scan Results:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "=== Grafana Scan ===" >> $GITHUB_STEP_SUMMARY
            cat grafana-scan.txt >> $GITHUB_STEP_SUMMARY
            echo "\n=== Prometheus Scan ===" >> $GITHUB_STEP_SUMMARY
            cat prometheus-scan.txt >> $GITHUB_STEP_SUMMARY
            echo "\n=== SonarQube Scan ===" >> $GITHUB_STEP_SUMMARY
            cat sonarqube-scan.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  deploy:
    needs: build-and-push
    if: ${{ github.event.inputs.deploy == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.TF_EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ secrets.TF_MONITORING_EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Deploy monitoring containers
        if: ${{ github.event.inputs.target == 'all' || github.event.inputs.target == 'monitoring' }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          DOCKER_REPO: yourmedia-ecf
          DOCKERHUB_REPO: yourmedia-ecf
          TF_MONITORING_EC2_PUBLIC_IP: ${{ secrets.TF_MONITORING_EC2_PUBLIC_IP }}
          GRAFANA_ADMIN_PASSWORD: ${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}
          GF_SECURITY_ADMIN_PASSWORD: ${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          DB_USERNAME: ${{ secrets.RDS_USERNAME }}
          DB_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          RDS_ENDPOINT: ${{ secrets.TF_RDS_ENDPOINT }}
          TF_RDS_ENDPOINT: ${{ secrets.TF_RDS_ENDPOINT }}
          GITHUB_CLIENT_ID: ${{ secrets.GITHUB_CLIENT_ID || 'dummy-id' }}
          GITHUB_CLIENT_SECRET: ${{ secrets.GITHUB_CLIENT_SECRET || 'dummy-secret' }}
          EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          chmod +x ./scripts/docker/docker-manager.sh
          ./scripts/docker/docker-manager.sh deploy monitoring

      - name: Deploy app containers
        if: ${{ github.event.inputs.target == 'all' || github.event.inputs.target == 'mobile' }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          DOCKER_REPO: yourmedia-ecf
          DOCKERHUB_REPO: yourmedia-ecf
          TF_EC2_PUBLIC_IP: ${{ secrets.TF_EC2_PUBLIC_IP }}
          EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          chmod +x ./scripts/docker/docker-manager.sh
          ./scripts/docker/docker-manager.sh deploy mobile

      - name: Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "* **Target:** ${{ github.event.inputs.target }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event.inputs.target }}" == "all" || "${{ github.event.inputs.target }}" == "monitoring" ]]; then
            echo "* **Monitoring URL:** http://${{ secrets.TF_MONITORING_EC2_PUBLIC_IP }}:3001" >> $GITHUB_STEP_SUMMARY
            echo "* **Prometheus URL:** http://${{ secrets.TF_MONITORING_EC2_PUBLIC_IP }}:9090" >> $GITHUB_STEP_SUMMARY
            echo "* **SonarQube URL:** http://${{ secrets.TF_MONITORING_EC2_PUBLIC_IP }}:9000" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ github.event.inputs.target }}" == "all" || "${{ github.event.inputs.target }}" == "mobile" ]]; then
            echo "* **Mobile App URL:** http://${{ secrets.TF_EC2_PUBLIC_IP }}:3000" >> $GITHUB_STEP_SUMMARY
          fi
